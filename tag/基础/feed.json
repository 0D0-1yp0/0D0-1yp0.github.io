{
    "version": "https://jsonfeed.org/version/1",
    "title": "we1c0me_t0 my odyssey domain",
    "subtitle": "\" 一切选择，都有其意义 \" —— 《VALORANT》 ISO",
    "icon": "https://0d0-1yp0.github.io/assets/favicon.ico",
    "description": "ps:当前站版本v1.11。右上角可以切换日夜主题。手机端左上角是功能栏。遇到长时间加载是bug需要刷新。目前文章只往csdn搬https://blog.csdn.net/2201_75506722?type=blog",
    "home_page_url": "https://0d0-1yp0.github.io",
    "items": [
        {
            "id": "https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "C语言入门回归（一）",
            "date_published": "2024-12-19T16:00:00.000Z",
            "content_html": "<h1 id=\"还木写完先开个坑\"><a class=\"anchor\" href=\"#还木写完先开个坑\">#</a> 还木写完 ^^ 先开个坑</h1>\n<hr />\n<h1 id=\"c语言入门回归一\"><a class=\"anchor\" href=\"#c语言入门回归一\">#</a> C 语言入门回归（一）</h1>\n<p>半年没碰 c 语言入门题，已成咸鱼矣</p>\n<p>遂，have a try</p>\n<p>古语有云，c 语言入门必刷青览，古语有云，难度不如 OI 一根</p>\n<p>我又不如青览一根，何如？算了哪有不疯的</p>\n<h2 id=\"取位\"><a class=\"anchor\" href=\"#取位\">#</a> 取位</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/a61073f9479408aca71660bb68c40c0.png\" alt=\"a61073f9479408aca71660bb68c40c0\" /></p>\n<p>说实话半年没摸真忘了是取位，还以为 a<em>100+b</em>10+c 这种操作来着</p>\n<p>难度不大，就是师弟不知为何就是不懂，差点没把我气死矣</p>\n<p>上 wp</p>\n<pre><code class=\"language-C\">#include&lt;stdio.h&gt;\nint main()\n&#123;\n  for (int i = 10; i &lt;=100; i++)  if (i%10 == i/10) printf(&quot;%d &quot;,i); \n  for (int i = 100; i &lt;=1000; i++) if (i%10 == i/100) printf(&quot;%d &quot;,i); \n  return 0;\n&#125;\n</code></pre>\n<p>如果不知 1000 的话就得用表达式表示范围了，以后再说</p>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/7b499f6356e89f60fcb83ae96dda62f.png\" alt=\"7b499f6356e89f60fcb83ae96dda62f\" /></p>\n<p>善，我入个门，不输出就行，删除什么链表什么 free 什么的，有缘再叙！</p>\n<p>掐指一算，我就多开一个数组负责标记好了</p>\n<p>然后？代码别写错</p>\n<p>废话少说，show me the code！！！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第 10 行不小心写的 i++。第 12 行不小心写的 j [i] == 1</p>\n<p>少看多做，看和做是两回事</p>\n<p>下播！</p>\n<p>D's domain</p>\n<p>24/12/20</p>\n",
            "tags": [
                "C语言基础",
                "C语言",
                "基础",
                "算法"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/",
            "url": "https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/",
            "title": "堆栈不平衡，布栈",
            "date_published": "2024-11-27T16:00:00.000Z",
            "content_html": "<h1 id=\"堆栈不平衡\"><a class=\"anchor\" href=\"#堆栈不平衡\">#</a> 堆栈不平衡</h1>\n<p>通常是由于函数调用和返回过程中堆栈操作的不匹配。每当调用一个函数时，程序会将当前的栈指针（SP）和返回地址压入堆栈，这会影响到后续的堆栈操作。</p>\n<p>例如，假设一个函数调用  <code>func</code> ，在进入  <code>func</code>  时，栈指针会增加（即压入返回地址）。如果在  <code>func</code>  中未正确地平衡堆栈（比如未能弹出相应的值），那么在返回时，栈指针可能会指向一个不正确的位置，导致堆栈不平衡。</p>\n<p>至于栈指针的修改，可以通过调整指令来确保调用的函数有正确的返回地址。例如，修改  <code>call</code>  指令的目标地址为  <code>0</code> ，可以防止调用某个函数，这在某些逆向工程中是用于跳过不必要的函数调用或陷阱，达到对程序行为的控制。</p>\n<p>简单来说，理解堆栈的操作顺序和调用约定是非常重要的。通过反汇编工具分析这些操作，可以更好地理解程序的执行流程和潜在的漏洞。你可以从调试程序，观察栈的变化入手，加深对这些概念的理解。</p>\n<p>要深入理解堆栈不平衡的问题，我们可以从堆栈的工作原理和汇编代码角度进行分析。</p>\n<h3 id=\"1-堆栈的基本概念\"><a class=\"anchor\" href=\"#1-堆栈的基本概念\">#</a> 1. 堆栈的基本概念</h3>\n<p>堆栈是一种后进先出（LIFO）的数据结构，用于存储函数调用的信息，包括返回地址、局部变量和参数。堆栈的顶端通常由栈指针（SP）指向。</p>\n<h3 id=\"2-函数调用的过程\"><a class=\"anchor\" href=\"#2-函数调用的过程\">#</a> 2. 函数调用的过程</h3>\n<p>当一个函数被调用时，会执行以下步骤：</p>\n<ol>\n<li><strong>保存返回地址</strong>：调用指令（如  <code>call func</code> ）会将当前指令的下一条地址压入堆栈。</li>\n<li><strong>调整栈指针</strong>：栈指针会减少（在 x86 架构中，栈向下增长）。</li>\n<li><strong>进入函数体</strong>：函数内部可以通过栈来存储局部变量。</li>\n</ol>\n<h4 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> 示例代码</h4>\n<pre><code class=\"language-assembly\">push ebp           ; 保存旧的基指针\nmov ebp, esp      ; 设置新的基指针\nsub esp, 16       ; 为局部变量分配空间\n\n; 函数体\n\nmov esp, ebp      ; 恢复栈指针\npop ebp           ; 恢复旧的基指针\nret                ; 返回\n</code></pre>\n<h3 id=\"3-堆栈不平衡的原因\"><a class=\"anchor\" href=\"#3-堆栈不平衡的原因\">#</a> 3. 堆栈不平衡的原因</h3>\n<p>如果在函数中未正确弹出压入的值，或者在返回之前没有恢复堆栈状态，就会导致堆栈不平衡。比如，如果你在函数内部多次压入值而没有相应的弹出，堆栈将继续增长，最终导致溢出。</p>\n<h3 id=\"4-栈指针的修改\"><a class=\"anchor\" href=\"#4-栈指针的修改\">#</a> 4. 栈指针的修改</h3>\n<p>栈指针的修改通常涉及  <code>push</code>  和  <code>pop</code>  指令。例如，如果需要跳过某个函数的执行，可以将  <code>call</code>  指令的目标地址更改为  <code>0</code> ，这样不会实际调用任何函数，从而避免栈指针的进一步修改。</p>\n<h4 id=\"伪代码示例\"><a class=\"anchor\" href=\"#伪代码示例\">#</a> 伪代码示例</h4>\n<pre><code class=\"language-assembly\">call 0x0         ; 不会改变堆栈状态\n</code></pre>\n<h3 id=\"5-可视化结构图\"><a class=\"anchor\" href=\"#5-可视化结构图\">#</a> 5. 可视化结构图</h3>\n<pre><code>[ ESP ]   --&gt;  | Return Address | &lt;-- call func\n               | Local Var 1    |\n               | Local Var 2    |\n               | ...            |\n               | Old EBP        |\n[ EBP ]   --&gt;  | Base Pointer   |\n</code></pre>\n<h3 id=\"6-逆向工程的实用技巧\"><a class=\"anchor\" href=\"#6-逆向工程的实用技巧\">#</a> 6. 逆向工程的实用技巧</h3>\n<ul>\n<li><strong>使用调试工具</strong>：例如 GDB 或 x64dbg，逐步执行代码，观察堆栈的变化。</li>\n<li><strong>分析调用约定</strong>：了解不同平台（如 x86 和 x64）的调用约定，这对逆向非常重要。</li>\n<li><strong>编写脚本</strong>：可以使用 Python 等语言结合工具（如 IDA Pro 或 Ghidra）自动化分析任务。</li>\n</ul>\n<p>掌握这些基础知识后，继续深入学习汇编语言和计算机体系结构将有助于你成为真正的逆向工程大师！</p>\n<h1 id=\"布栈\"><a class=\"anchor\" href=\"#布栈\">#</a> 布栈</h1>\n<blockquote>\n<p>教我做一道 CTF 中的 pwn 题: #!/usr/bin/env python from pwn import *  sh = process ('./ret2libc1')  binsh_addr = 0x8048720 system_plt = 0x08048460 payload = flat ([b'a' * 112, system_plt, b'b' * 4, binsh_addr]) sh.sendline (payload)  sh.interactive () 这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以 'bbbb' 作为虚假的地址，其后参数对应的参数内容。  你看他布栈的时候，为什么要 system_plt 后面要布一个虚假的地址，然后才是参数呢，这里没太懂</p>\n</blockquote>\n<p>这道题目是典型的 <strong>ret2libc</strong> 攻击 (Return-to-libc)，目标是通过覆盖栈上的返回地址，绕过程序的正常流程，转而调用  <code>system()</code>  函数来执行命令（在这个例子中是  <code>/bin/sh</code> ）。为了理解为什么  <code>system_plt</code>  后面需要填充一个虚假的地址（ <code>b'b' * 4</code> ），我们需要详细分析下栈结构和函数调用的过程。</p>\n<h3 id=\"背景知识\"><a class=\"anchor\" href=\"#背景知识\">#</a> 背景知识</h3>\n<p>在  <code>x86</code>  架构的程序中，函数调用的基本过程如下：</p>\n<ol>\n<li><strong>压栈</strong>：当一个函数被调用时，程序会将当前的 <strong>返回地址</strong> 压入栈中，这个返回地址是程序调用该函数后，程序应该跳转回来的地址。</li>\n<li><strong>参数传递</strong>：在栈上，函数的参数会紧随返回地址之后依次被压入栈中。</li>\n<li><strong>栈帧结构</strong>：每次函数调用时，都会为该函数分配一个栈帧，栈帧中包含：\n<ul>\n<li><strong>返回地址</strong>：指向调用函数之后的代码位置。</li>\n<li><strong>参数</strong>：该函数的参数。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"攻击思路\"><a class=\"anchor\" href=\"#攻击思路\">#</a> 攻击思路</h3>\n<p>在这道题中，我们要利用程序中的漏洞，覆盖栈上的返回地址，使得程序在执行  <code>ret</code> （返回指令）时跳到我们指定的地址，也就是  <code>system()</code>  函数的地址。</p>\n<h3 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sh <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ret2libc1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>binsh_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x8048720</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>system_plt <span class=\"token operator\">=</span> <span class=\"token number\">0x08048460</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">112</span><span class=\"token punctuation\">,</span> system_plt<span class=\"token punctuation\">,</span> <span class=\"token string\">b'b'</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> binsh_addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li>\n<p><strong> <code>binsh_addr = 0x8048720</code> </strong>：这是我们要传给  <code>system()</code>  函数的参数地址，也就是  <code>/bin/sh</code>  字符串的地址。 <code>system()</code>  函数需要一个字符串参数，在这里我们传递的是  <code>/bin/sh</code>  的地址， <code>system()</code>  会执行该命令，启动一个 shell。</p>\n</li>\n<li>\n<p><strong> <code>system_plt = 0x08048460</code> </strong>：这是  <code>system</code>  函数的地址，在程序中的 <strong>PLT（Procedure Linkage Table）</strong> 区域。PLT 是程序用来调用动态库函数的一个表，每当程序要调用动态库中的函数时，都会先跳转到 PLT 处，由 PLT 去调用函数的实际地址。</p>\n</li>\n<li>\n<p><strong> <code>payload = flat([b'a' * 112, system_plt, b'b' * 4, binsh_addr])</code> </strong>：</p>\n<ul>\n<li><strong> <code>b'a' * 112</code> </strong>：这里填充的是  <code>112</code>  个字节  <code>a</code> ，这是覆盖栈帧到返回地址的部分。程序会首先执行一些前期的操作（例如栈的初始化、局部变量等），然后遇到返回地址。因为栈的布局是从高地址到低地址的，所以我们填充  <code>a</code>  字符来覆盖返回地址的空间，确保在覆盖掉返回地址后，后面的内容是我们想要填充的内容。</li>\n<li><strong> <code>system_plt</code> </strong>：这是我们覆盖的返回地址。当栈上的返回地址被覆盖为  <code>system_plt</code>  后，程序将跳转到  <code>system()</code>  函数。这个  <code>system_plt</code>  的地址是硬编码的，它会让程序跳转到  <code>system()</code>  的实际地址。注意，这个地址是 PLT 表中的地址，在动态链接的程序中，PLT 是一个跳转表，用于跳转到  <code>system</code>  函数的实际实现地址。</li>\n<li><strong> <code>b'b' * 4</code> </strong>：这是一个 <strong>虚假的返回地址</strong>，也就是说这是我们填充在  <code>system_plt</code>  后的一个占位符。这个部分的大小是  <code>4</code>  字节（通常是  <code>x86</code>  架构的指针大小）。为什么要填充这个虚假的返回地址呢？因为  <code>system()</code>  函数的调用约定是需要一个参数（即  <code>/bin/sh</code>  的地址）。这个虚假的返回地址用于模拟栈上  <code>system()</code>  函数执行完之后返回的地址。我们这样做是为了让栈结构保持正确，在调用  <code>system()</code>  时，栈帧结构要完整，所以我们需要一个假的返回地址来确保  <code>system()</code>  执行完成后能正确返回。实际上，在这道题中，虚假的地址  <code>b'b' * 4</code>  会被  <code>system()</code>  执行后丢弃。</li>\n<li><strong> <code>binsh_addr</code> </strong>：这是我们传递给  <code>system()</code>  函数的参数  <code>/bin/sh</code>  字符串的地址。 <code>system()</code>  函数需要一个字符串作为参数，这个参数是  <code>system()</code>  在执行时使用的命令，告诉它启动一个 shell。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>sh.sendline(payload)</code> </strong>：这一行是将构造好的 payload 发送到程序中，触发栈的溢出和返回地址的修改。</p>\n</li>\n<li>\n<p><strong> <code>sh.interactive()</code> </strong>：执行完 payload 后，程序将进入交互模式，让我们与程序进行交互，通常在这种 CTF 题目中，这意味着我们已经成功地获得了一个 shell，可以执行命令。</p>\n</li>\n</ol>\n<h3 id=\"为什么要填充虚假的地址\"><a class=\"anchor\" href=\"#为什么要填充虚假的地址\">#</a> 为什么要填充虚假的地址？</h3>\n<p>在调用  <code>system()</code>  函数时，通常在栈上需要有一个返回地址，指示函数执行完之后应该跳转到哪里。由于  <code>system()</code>  是一个库函数，它执行完成后并不会返回到一个特定的地址，而是会根据调用栈返回到调用它的地方。但是，由于我们要用  <code>ret2libc</code>  攻击来绕过正常的程序流程，我们通过修改返回地址，使得程序跳转到  <code>system()</code>  函数。但是  <code>system()</code>  函数的调用约定仍然需要栈上有一个正确的返回地址（即调用  <code>system()</code>  后程序会跳回的地址）。</p>\n<ul>\n<li>由于  <code>system()</code>  在执行后会返回，我们需要一个虚假的返回地址来填补栈上的空隙，确保栈帧结构完整。</li>\n<li>我们用  <code>b'b' * 4</code>  来填充这个虚假的返回地址。这里的  <code>4</code>  字节是因为在 x86 架构中，返回地址是一个指针，占用 4 字节。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li><strong> <code>system_plt</code> </strong> 是我们想跳转到的地址，即  <code>system()</code>  函数的入口。</li>\n<li><strong>虚假的返回地址 ( <code>b'b' * 4</code> )</strong> 用于保证栈帧的完整性，它只是一个占位符。 <code>system()</code>  执行后会跳过这个虚假的地址，并且返回到  <code>system()</code>  函数的调用者。</li>\n<li><strong> <code>binsh_addr</code> </strong> 是传递给  <code>system()</code>  函数的参数，即  <code>/bin/sh</code>  的地址， <code>system()</code>  会执行它，启动一个 shell。</li>\n</ul>\n<p>这个过程通过巧妙地控制栈上的返回地址，利用系统中已经存在的库函数来执行恶意代码，从而达到绕过程序控制并获取 shell 的目的。</p>\n",
            "tags": [
                "CTF",
                "二进制安全",
                "基础",
                "CTF",
                "二进制"
            ]
        }
    ]
}