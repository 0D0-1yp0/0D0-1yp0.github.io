{
    "version": "https://jsonfeed.org/version/1",
    "title": "we1c0me_t0 my odyssey domain",
    "subtitle": "\" 一切选择，都有其意义 \" —— 《VALORANT》 ISO",
    "icon": "https://0d0-1yp0.github.io/assets/favicon.ico",
    "description": "ps:当前站版本v1.11。右上角可以切换日夜主题。手机端左上角是功能栏。遇到长时间加载是bug需要刷新。目前文章只往csdn搬https://blog.csdn.net/2201_75506722?type=blog",
    "home_page_url": "https://0d0-1yp0.github.io",
    "items": [
        {
            "id": "https://0d0-1yp0.github.io/2024/12/24/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92(%E4%B8%89)/",
            "url": "https://0d0-1yp0.github.io/2024/12/24/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92(%E4%B8%89)/",
            "title": "C语言入门知识点&基础思路（三）",
            "date_published": "2024-12-23T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>All the moves like Jagger</p>\n</blockquote>\n<h1 id=\"c语言哭传三\"><a class=\"anchor\" href=\"#c语言哭传三\">#</a> C 语言哭传（三）</h1>\n<p>本期开始涉及的知识点，所含知识尽量补多一点，尽量能从一题的角度理解一个点</p>\n<p>本期含递归 (tips: 挑战题)，函数指针，今天来点大家想看的东西奥（otto 音</p>\n<p>本文或者以后也是，涉及到大模型的回答，均使用 o1/o1-mini 模型或者 claude3.5 模型，我也会重审，基本不会误导大家</p>\n<p>来几个填选。题不在多，在精。一道题可能自己做 1 分钟就过了，要求我给别人讲可能就是半小时，但是去研究底层的这半小时远比自己做的一分钟收获的多，收获的深</p>\n<h2 id=\"815指针\"><a class=\"anchor\" href=\"#815指针\">#</a> 8.15 指针</h2>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241224085232574.png\" alt=\"image-20241224085232574\" /></p>\n<p>这个程序就是倒序输出，没什么好说的，主要是拓展的一些东西</p>\n<p>答案:</p>\n<p>Java</p>\n<p>dBase</p>\n<p>CLanguage</p>\n<p>Pascal</p>\n<h3 id=\"思路知识点\"><a class=\"anchor\" href=\"#思路知识点\">#</a> 思路知识点：</h3>\n<p>有同学不太熟悉 &amp; 和 * 这两个指针相关基本操作，大概 talk 一下</p>\n<h4 id=\"运算符和-运算符\"><a class=\"anchor\" href=\"#运算符和-运算符\">#</a>  <code>&amp;</code>  运算符和  <code>*</code>  运算符</h4>\n<ul>\n<li>\n<p><strong> <code>&amp;</code>  运算符（取地址符）</strong>：用于获取变量的内存地址。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ptr 指向变量 x 的地址</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong> <code>*</code>  运算符（解引用符）</strong>：用于访问指针所指向的内存地址上的值。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 的值为 x，即 10</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong> <code>&amp;</code>  运算符</strong>用于获取变量的地址。</p>\n<p><strong> <code>\\*</code>  运算符</strong>用于解引用指针，访问其指向的值。</p>\n<h3 id=\"拓展\"><a class=\"anchor\" href=\"#拓展\">#</a> 拓展：</h3>\n<ol>\n<li><strong>数组名本身不是指针</strong>：虽然数组名在某些情况下表现得像指针，但它们在内存中是一个固定的地址，不能像指针变量那样改变指向</li>\n<li><strong>不能进行指针运算</strong>：你不能对数组名进行指针运算，例如  <code>a + 1</code>  在某些情况下是合法的，但不能改变  <code>a</code>  本身的地址</li>\n<li>使用  <code>sizeof(a)</code>  时，得到的是整个数组的大小，而不是指针的大小</li>\n<li><code>sizeof(ptrA)</code>  返回指针的大小（通常是 4 或 8 个字节，取决于系统架构）。</li>\n<li>将数组作为函数参数传递时，实际上传递的是指向数组第一个元素的指针</li>\n<li>在 C 语言中，<strong>数组名</strong>（例如整型数组  <code>a[]</code>  或是字符型数组  <code>b[]</code> ）在大多数表达式中会<strong>退化为指向数组第一个元素的指针</strong>。这意味着在这些上下文中，你可以将数组名当作指针来使用。例如：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptrA <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a 退化为 int*，指向 a [0]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptrB <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//b 退化为 char*，指向 b [0]</span></pre></td></tr></table></figure><p>防止大家把字符数组初始化，字符串数组们的初始化，也提一下：</p>\n<h3 id=\"char-achar-a与char-a-含大模型o1的回答\"><a class=\"anchor\" href=\"#char-achar-a与char-a-含大模型o1的回答\">#</a> char *a []，char a [] 与 char a [][] (含大模型 o1 的回答)：</h3>\n<blockquote>\n<ol>\n<li>\n<p><strong>声明一：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Pascal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dBase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>声明二：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Pascal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dBase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"分析与解释\"><a class=\"anchor\" href=\"#分析与解释\">#</a> 分析与解释</h4>\n<h5 id=\"1-声明一char-a\"><a class=\"anchor\" href=\"#1-声明一char-a\">#</a> 1. <strong>声明一： <code>char *a[]</code> </strong></h5>\n<ul>\n<li>\n<p><strong>类型说明：</strong></p>\n<ul>\n<li>这是一个<strong>指针数组</strong>，即数组中的每个元素都是一个指向 <code>char</code>  类型的指针。</li>\n<li>每个指针指向一个字符串字面量（字符串常量）。</li>\n</ul>\n</li>\n<li>\n<p><strong>内存分配：</strong></p>\n<ul>\n<li>数组 <code>a</code>  本身在内存中分配了一组指针（通常在栈上）。</li>\n<li>每个字符串字面量（如  <code>&quot;Pascal&quot;</code> ）存储在<strong>只读存储区</strong>（例如，常量区）中，多个指针指向这些字符串。</li>\n</ul>\n</li>\n<li>\n<p><strong>可修改性：</strong></p>\n<ul>\n<li><strong>指针本身</strong>可以修改，即可以让指针指向不同的字符串。</li>\n<li><strong>字符串内容</strong>通常是<strong>只读的</strong>，尝试修改会导致未定义行为（通常是程序崩溃）。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Pascal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dBase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 访问第一个字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: Pascal</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 修改指针，指向另一个字符串</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: Python</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 尝试修改字符串内容（不推荐，可能导致崩溃）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//a [0][0] = 'p'; // 未定义行为</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-声明二char-a\"><a class=\"anchor\" href=\"#2-声明二char-a\">#</a> 2. <strong>声明二： <code>char a[]</code> </strong></h4>\n<ul>\n<li>\n<p><strong>类型说明：</strong></p>\n<ul>\n<li>这是一个<strong>字符数组</strong>，即数组中的每个元素都是一个 <code>char</code>  类型的字符。</li>\n<li>然而，您的声明尝试用多个字符串字面量初始化一个字符数组，这是不合法的。</li>\n</ul>\n</li>\n<li>\n<p><strong>问题说明：</strong></p>\n<ul>\n<li>在 C 语言中， <code>char a[] = &#123; &quot;Pascal&quot;, &quot;C Language&quot;, &quot;dBase&quot;, &quot;Java&quot; &#125;;</code>  是<strong>非法的</strong>，因为 <code>char a[]</code>  只能初始化为单个字符串或单个字符数组。</li>\n<li>如果您想存储多个字符串，应使用<strong>二维字符数组</strong>或<strong>指针数组</strong>。</li>\n</ul>\n</li>\n<li>\n<p><strong>可能的正确声明：</strong></p>\n<p><strong>方式一：二维字符数组</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Pascal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dBase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>这里， <code>a</code>  是一个二维字符数组，每个子数组最多可以存储 19 个字符（第 20 个字符留给字符串结束符 <code>\\0</code> ）。</li>\n</ul>\n<p><strong>方式二：指针数组（与声明一相同）</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Pascal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dBase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>内存分配：</strong></p>\n<ul>\n<li><strong>二维字符数组</strong>在内存中分配了一个连续的字符块，用于存储所有字符串的字符。</li>\n<li>每个字符串的长度需要在声明时指定（如上例中的 <code>20</code> ），以确保有足够的空间存储字符串和结束符。</li>\n</ul>\n</li>\n<li>\n<p><strong>可修改性：</strong></p>\n<ul>\n<li><strong>字符数组中的字符</strong>是<strong>可修改的</strong>，可以直接更改数组中的字符。</li>\n<li><strong>字符串字面量</strong>（如果使用指针数组）通常是只读的，无法修改。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例：二维字符数组</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Pascal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dBase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 访问第一个字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: Pascal</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 修改字符内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'p'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: pascal</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"主要异同点总结\"><a class=\"anchor\" href=\"#主要异同点总结\">#</a> <strong>主要异同点总结</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>方面</strong></th>\n<th><strong> <code>char *a[]</code> （指针数组）</strong></th>\n<th><strong> <code>char a[][]</code> （二维字符数组）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>类型</strong></td>\n<td>数组中的每个元素是 <code>char</code>  指针（指向字符串）</td>\n<td>数组中的每个元素是 <code>char</code> ，整体形成二维数组</td>\n</tr>\n<tr>\n<td><strong>内存分配</strong></td>\n<td>指针存储在数组中，字符串存储在只读存储区（或堆 / 静态区）</td>\n<td>所有字符串字符存储在连续的数组内存中</td>\n</tr>\n<tr>\n<td><strong>可修改性</strong></td>\n<td>指针可修改指向，但字符串内容通常不可修改</td>\n<td>字符数组中的字符可修改</td>\n</tr>\n<tr>\n<td><strong>内存大小</strong></td>\n<td>仅存储指针，内存占用较少，但字符串分散存储</td>\n<td>分配足够的空间存储所有字符，内存占用较大但连续</td>\n</tr>\n<tr>\n<td><strong>灵活性</strong></td>\n<td>更灵活，可以指向不同长度的字符串</td>\n<td>需要预先定义每个字符串的最大长度</td>\n</tr>\n<tr>\n<td><strong>访问方式</strong></td>\n<td>通过指针访问，每个字符串独立</td>\n<td>通过二维数组下标访问，每个字符串按数组索引排列</td>\n</tr>\n<tr>\n<td><strong>字符串长度</strong></td>\n<td>每个字符串长度可以不同</td>\n<td>每个字符串的最大长度固定（由数组声明时指定，如 <code>20</code> ）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"选择使用哪种方式\"><a class=\"anchor\" href=\"#选择使用哪种方式\">#</a> <strong>选择使用哪种方式</strong></h3>\n<ul>\n<li><strong>使用指针数组（ <code>char \\*a[]</code> ）的情况：</strong>\n<ul>\n<li>当字符串长度不固定且可能变化时。</li>\n<li>当需要指向不同来源的字符串（如动态分配的字符串）。</li>\n<li>节省内存，因为只存储指针，而不是为每个字符串预留固定空间。</li>\n</ul>\n</li>\n<li><strong>使用二维字符数组（ <code>char a[][]</code> ）的情况：</strong>\n<ul>\n<li>当字符串长度相对固定且已知时。</li>\n<li>当需要修改字符串内容时。</li>\n<li>需要保证所有字符串在内存中连续存储，便于某些操作（如批量处理）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> <strong>总结</strong></h3>\n<ul>\n<li><strong> <code>char \\*a[]</code> </strong> 是一个指针数组，每个元素指向一个字符串字面量，适用于字符串长度不固定且不需要修改内容的场景。</li>\n<li><strong> <code>char a[][]</code> </strong> 是一个二维字符数组，所有字符串的字符存储在连续的内存中，适用于字符串长度相对固定且需要修改内容的场景。</li>\n</ul>\n<p>希望以上解释能帮助您更好地理解这两种声明的异同。如果您有更多问题，欢迎继续提问！</p>\n</blockquote>\n<h2 id=\"816指针\"><a class=\"anchor\" href=\"#816指针\">#</a> 8.16 指针</h2>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241224094616758.png\" alt=\"image-20241224094616758\" /></p>\n<p>就是</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>−</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3-2^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>慢慢来，主函数传参后，f1 指向 fa，f2 指向 fb，也就是 f 调用的 fa 和 fb，fa 就是乘方 fb 就是立方。用的是函数指针而已</p>\n<h3 id=\"函数指针\"><a class=\"anchor\" href=\"#函数指针\">#</a> 函数指针</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 定义函数 fa，计算 x 的平方</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 定义函数 fb，计算 x 的立方</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 定义函数 f，接受两个函数指针 f1 和 f2，以及一个整数 x</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 它调用 f2 (x) 减去 f1 (x) 的结果</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 调用函数 f，将 fa 和 fb 作为参数传递，并传入 x=2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">,</span> fb<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"主要概念\"><a class=\"anchor\" href=\"#主要概念\">#</a> 主要概念</h4>\n<ol>\n<li>\n<p><strong>函数指针的声明</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>解释</strong>：\n<ul>\n<li><code>int</code> ：表示函数返回类型为 <code>int</code> 。</li>\n<li><code>(*f1)</code> ： <code>f1</code>  是一个指针，指向一个函数。</li>\n<li><code>(int)</code> ：表示这个函数接受一个 <code>int</code>  类型的参数。</li>\n</ul>\n</li>\n<li><strong>整体含义</strong>： <code>f1</code>  是一个指向接受一个 <code>int</code>  参数并返回 <code>int</code>  的函数的指针。</li>\n</ul>\n</li>\n<li>\n<p><strong>函数指针的使用</strong></p>\n<p>在函数 <code>f</code>  中， <code>f1</code>  和 <code>f2</code>  都是函数指针，分别指向不同的函数（ <code>fa</code>  和 <code>fb</code> ）。通过这些指针， <code>f</code>  函数可以调用传入的函数并执行相应的操作。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>这里， <code>f2(x)</code>  调用了指针 <code>f2</code>  所指向的函数（即 <code>fb(x)</code> ），</li>\n<li><code>f1(x)</code>  调用了指针 <code>f1</code>  所指向的函数（即 <code>fa(x)</code> ）。</li>\n<li>最终返回 <code>fb(x) - fa(x)</code>  的结果。</li>\n</ul>\n</li>\n<li>\n<p><strong>在 <code>main</code>  函数中传递函数指针</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">,</span> fb<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>这里， <code>fa</code>  和 <code>fb</code>  作为参数传递给函数 <code>f</code> 。由于 <code>fa</code>  和 <code>fb</code>  本身就是函数的名称，在这种上下文中，它们会自动转换为指向这些函数的指针。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"拓展函数指针的优势含o1模型回答\"><a class=\"anchor\" href=\"#拓展函数指针的优势含o1模型回答\">#</a> 拓展：函数指针的优势（含 o1 模型回答）</h4>\n<ol>\n<li>\n<p><strong>回调函数</strong>：</p>\n<p>函数指针允许将函数作为参数传递，从而实现回调机制。这在实现事件驱动编程或需要在不同情况下执行不同操作时非常有用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对于被调函数来说，传入了 fa 给指针 func，func 指向了 fa，所以就是调用 fa (5)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 fb (3)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>动态函数调用</strong>：</p>\n<p>根据程序的运行状态，可以动态选择要调用的函数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 注意，现在是在主函数里，直接定义一个指针，函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    operation <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    operation <span class=\"token operator\">=</span> fb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 已经有了指向的对象，加个参数即可调用</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>构建函数表</strong>：</p>\n<p>可以将多个函数指针存储在数组中，方便管理和调用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>functions<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>fa<span class=\"token punctuation\">,</span> fb<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: %d\\n\"</span><span class=\"token punctuation\">,</span> functions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 你看懂了吗？~</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"再补两句\"><a class=\"anchor\" href=\"#再补两句\">#</a> 再补两句</h4>\n<ol>\n<li>\n<p><strong>函数指针的类型必须匹配</strong>：</p>\n<p>声明函数指针时，返回类型和参数类型必须与所指向的函数完全一致，否则会导致未定义行为。</p>\n</li>\n<li>\n<p>函数指针的声明语法可能有些复杂，尤其是在函数指针作为参数或返回值时。</p>\n<p>可以使用 <code>typedef</code>  简化声明。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>func_ptr f1<span class=\"token punctuation\">,</span> func_ptr f2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"817指针\"><a class=\"anchor\" href=\"#817指针\">#</a> 8.17 指针</h2>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241224102739999.png\" alt=\"image-20241224102739999\" /></p>\n<p>fun 函数典型的互换操作，同时初具递归雏形（大约的确不算递归）</p>\n<p>整体函数所做的事情非常简单，单纯的逆序对调罢了</p>\n<p>答案是 8162</p>\n<p><strong>做个递归吧</strong></p>\n<h2 id=\"挑战813递归\"><a class=\"anchor\" href=\"#挑战813递归\">#</a> 挑战：8.13 递归</h2>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241224103409289.png\" alt=\"image-20241224103409289\" /></p>\n<p>涉及了第一章讲过的取位操作，可以去复习一下</p>\n<p><strong>此外， <code>+'0'</code> ：将数字转换为对应的字符。例如， <code>3 + '0'</code>  结果是字符  <code>'3'</code> 。</strong></p>\n<p>递归在计算机里算是一个比较经典的玩法了，比较考验人类的思维。</p>\n<h4 id=\"递归函数解析\"><a class=\"anchor\" href=\"#递归函数解析\">#</a> 递归函数解析</h4>\n<p>递归函数通常包括两个主要部分：</p>\n<ol>\n<li><strong>基准情况（Base Case）：</strong> 确定递归何时停止。</li>\n<li><strong>递归情况（Recursive Case）：</strong> 函数调用自身，以逐步逼近基准情况。</li>\n</ol>\n<p>在本题中：</p>\n<ul>\n<li><strong>基准情况：</strong> 当  <code>n / 10</code>  等于  <code>0</code>  时，表示已经处理到最低位的数字，不再需要递归。</li>\n<li><strong>递归情况：</strong> 当  <code>n / 10</code>  不等于  <code>0</code>  时，继续处理更高位的数字。</li>\n</ul>\n<blockquote>\n<p><strong>先说一下答案:a+1 、n%10+'0'</strong> , 也就是还没到最后一位的时候指针向前就是空 1, 再加一个基本的取位操作就是空 2</p>\n</blockquote>\n<p><strong>难点在于理解递归</strong></p>\n<p>其实对我本人来说，递归的难点在于递归完成之后的事情和递归的编写，就比如这道题，递归结束后的回溯花了我一定时间去理解。我也很久没摸递归了</p>\n<p>以下的话可能有点抽象需要去理解</p>\n<h4 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h4>\n<p>​\t<strong>if 触发之后，调用自身，但是本次主调函数还是没执行完的，又不是循环的 break, 也就是不管被调函数递归了多少轮，主调函数终究会执行最后一句 * a = ___  当出现了第一个执行完毕，不会调用函数的被调函数后，触发了基准情况</strong></p>\n<p>现在，通过 (o1), 让我们一步一步地看这个递归函数是如何工作的。</p>\n<h5 id=\"初始调用converta-483\"><a class=\"anchor\" href=\"#初始调用converta-483\">#</a> 初始调用： <code>convert(a, 483)</code></h5>\n<ul>\n<li><strong>参数：</strong>\n<ul>\n<li><code>a</code>  指向字符数组的起始位置（即  <code>a[0]</code> ）。</li>\n<li><code>n = 483</code></li>\n</ul>\n</li>\n<li><strong>执行步骤：</strong>\n<ol>\n<li>计算  <code>i = 483 / 10 = 48</code> （整除）。</li>\n<li>因为  <code>48 != 0</code> ，所以递归调用  <code>convert(a + 1, 48)</code> 。</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"第一次递归调用converta-1-48\"><a class=\"anchor\" href=\"#第一次递归调用converta-1-48\">#</a> 第一次递归调用： <code>convert(a + 1, 48)</code></h5>\n<ul>\n<li><strong>参数：</strong>\n<ul>\n<li><code>a + 1</code>  指向数组的下一个位置（即  <code>a[1]</code> ）。</li>\n<li><code>n = 48</code></li>\n</ul>\n</li>\n<li><strong>执行步骤：</strong>\n<ol>\n<li>计算  <code>i = 48 / 10 = 4</code> 。</li>\n<li>因为  <code>4 != 0</code> ，所以递归调用  <code>convert(a + 2, 4)</code> 。</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"第二次递归调用converta-2-4\"><a class=\"anchor\" href=\"#第二次递归调用converta-2-4\">#</a> 第二次递归调用： <code>convert(a + 2, 4)</code></h5>\n<ul>\n<li><strong>参数：</strong>\n<ul>\n<li><code>a + 2</code>  指向数组的下一个位置（即  <code>a[2]</code> ）。</li>\n<li><code>n = 4</code></li>\n</ul>\n</li>\n<li><strong>执行步骤：</strong>\n<ol>\n<li>计算  <code>i = 4 / 10 = 0</code> 。</li>\n<li>因为  <code>0 == 0</code> ，不再递归，直接执行  <code>*a = (4 % 10) + '0' = '4'</code> ，即  <code>a[2] = '4'</code> 。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>注意，<strong> 此处将开始回溯</strong></p>\n</blockquote>\n<h5 id=\"回到第一次递归调用converta-1-48\"><a class=\"anchor\" href=\"#回到第一次递归调用converta-1-48\">#</a> 回到第一次递归调用： <code>convert(a + 1, 48)</code></h5>\n<ul>\n<li>现在继续执行之前的调用\n<ul>\n<li>执行  <code>*a = (48 % 10) + '0' = '8'</code> ，即  <code>a[1] = '8'</code> 。</li>\n</ul>\n</li>\n</ul>\n<p><strong>此处的理解就是，对于第二次那次 convert 的执行，a 相对于最后一次还是 a+1, 被传入的 n 是上一次的 i 也就是最开始的那个 n/10, 即 48, 直接执行取末尾的操作即可</strong></p>\n<h5 id=\"回到初始调用converta-483\"><a class=\"anchor\" href=\"#回到初始调用converta-483\">#</a> 回到初始调用： <code>convert(a, 483)</code></h5>\n<ul>\n<li>继续执行之前的调用\n<ul>\n<li>执行  <code>*a = (483 % 10) + '0' = '3'</code> ，即  <code>a[0] = '3'</code> 。</li>\n</ul>\n</li>\n</ul>\n<p><strong>此处的理解就是，对于本次 convert 的执行，a 就是字符数组的开始，直接执行取末位的操作即可</strong></p>\n<h5 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结:</h5>\n<table>\n<thead>\n<tr>\n<th>调用层级</th>\n<th>参数  <code>a</code>  指向的位置</th>\n<th>参数  <code>n</code></th>\n<th>执行操作</th>\n<th>赋值结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始调用</td>\n<td><code>a[0]</code></td>\n<td><code>483</code></td>\n<td>递归调用  <code>convert(a+1, 48)</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>第一次递归调用</td>\n<td><code>a[1]</code></td>\n<td><code>48</code></td>\n<td>递归调用  <code>convert(a+2, 4)</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>第二次递归调用</td>\n<td><code>a[2]</code></td>\n<td><code>4</code></td>\n<td>赋值  <code>a[2] = '4'</code></td>\n<td><code>a[2] = '4'</code></td>\n</tr>\n<tr>\n<td>回到第一次递归</td>\n<td><code>a[1]</code></td>\n<td><code>48</code></td>\n<td>赋值  <code>a[1] = '8'</code></td>\n<td><code>a[1] = '8'</code></td>\n</tr>\n<tr>\n<td>回到初始调用</td>\n<td><code>a[0]</code></td>\n<td><code>483</code></td>\n<td>赋值  <code>a[0] = '3'</code></td>\n<td><code>a[0] = '3'</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight scss\"><figcaption data-lang=\"Sass (Scss)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> 483<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>└── <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a+1<span class=\"token punctuation\">,</span> 48<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     │</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     └── <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a+2<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          ├── 赋值 a[2] = <span class=\"token string\">'4'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          └── 返回到 <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a+1<span class=\"token punctuation\">,</span> 48<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     ├── 赋值 a[1] = <span class=\"token string\">'8'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     └── 返回到 <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> 483<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>├── 赋值 a[0] = <span class=\"token string\">'3'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>└── 返回到 <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>此题没有<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"拓展递归调用栈入门者选择性阅读此段\"><a class=\"anchor\" href=\"#拓展递归调用栈入门者选择性阅读此段\">#</a> 拓展：递归调用栈 (入门者选择性阅读此段)</h4>\n<blockquote>\n<p>递归函数通过<strong>函数调用栈</strong>（Call Stack）来管理函数调用和返回。每一次递归调用都会在调用栈上创建一个新的<strong>栈帧</strong>，用于保存该调用的局部变量和返回地址。</p>\n<h5 id=\"示例将-483-转换为-384\"><a class=\"anchor\" href=\"#示例将-483-转换为-384\">#</a> 示例：将  <code>483</code>  转换为  <code>&quot;384&quot;</code></h5>\n<ol>\n<li><strong>初始调用</strong>： <code>convert(a, 483)</code></li>\n<li><strong>第一次递归</strong>： <code>convert(a + 1, 48)</code></li>\n<li><strong>第二次递归</strong>： <code>convert(a + 2, 4)</code></li>\n<li><strong>递归终止</strong>：不再递归，赋值  <code>'4'</code>  到  <code>a[2]</code></li>\n<li><strong>返回到第二次调用</strong>：赋值  <code>'8'</code>  到  <code>a[1]</code></li>\n<li><strong>返回到初始调用</strong>：赋值  <code>'3'</code>  到  <code>a[0]</code></li>\n<li><strong>主函数</strong>：添加  <code>'\\0'</code> ，完成字符串</li>\n</ol>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<h5 id=\"1-初始调用converta-483\"><a class=\"anchor\" href=\"#1-初始调用converta-483\">#</a> 1. 初始调用： <code>convert(a, 483)</code></h5>\n<ul>\n<li>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>a</code>  指向字符数组的起始位置（ <code>a[0]</code> ）。</li>\n<li><code>n = 483</code></li>\n</ul>\n</li>\n<li>\n<p><strong>执行步骤</strong>：</p>\n<ul>\n<li>计算  <code>i = 483 / 10 = 48</code></li>\n<li>因为  <code>48 != 0</code> ，所以递归调用  <code>convert(a + 1, 48)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>调用栈</strong>：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">483</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-第一次递归调用converta-1-48\"><a class=\"anchor\" href=\"#2-第一次递归调用converta-1-48\">#</a> 2. 第一次递归调用： <code>convert(a + 1, 48)</code></h5>\n<ul>\n<li>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>a + 1</code>  指向数组的第二个位置（ <code>a[1]</code> ）。</li>\n<li><code>n = 48</code></li>\n</ul>\n</li>\n<li>\n<p><strong>执行步骤</strong>：</p>\n<ul>\n<li>计算  <code>i = 48 / 10 = 4</code></li>\n<li>因为  <code>4 != 0</code> ，所以递归调用  <code>convert(a + 2, 4)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>调用栈</strong>：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">483</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-第二次递归调用converta-2-4\"><a class=\"anchor\" href=\"#3-第二次递归调用converta-2-4\">#</a> 3. 第二次递归调用： <code>convert(a + 2, 4)</code></h5>\n<ul>\n<li>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>a + 2</code>  指向数组的第三个位置（ <code>a[2]</code> ）。</li>\n<li><code>n = 4</code></li>\n</ul>\n</li>\n<li>\n<p><strong>执行步骤</strong>：</p>\n<ul>\n<li>计算  <code>i = 4 / 10 = 0</code></li>\n<li>因为  <code>0 == 0</code> ，不再递归，直接赋值  <code>*a = '4'</code> （ <code>a[2] = '4'</code> ）</li>\n</ul>\n</li>\n<li>\n<p><strong>调用栈</strong>：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">483</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>赋值结果</strong>：</p>\n<ul>\n<li><code>a[2] = '4'</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4-递归返回返回到第一次递归调用\"><a class=\"anchor\" href=\"#4-递归返回返回到第一次递归调用\">#</a> 4. 递归返回：返回到第一次递归调用</h5>\n<ul>\n<li>\n<p><strong>完成  <code>convert(a + 2, 4)</code>  后</strong>：</p>\n<ul>\n<li>执行  <code>*a = (48 % 10) + '0' = '8'</code> （ <code>a[1] = '8'</code> ）</li>\n</ul>\n</li>\n<li>\n<p><strong>调用栈</strong>：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">483</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>赋值结果</strong>：</p>\n<ul>\n<li><code>a[1] = '8'</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"5-递归返回返回到初始调用\"><a class=\"anchor\" href=\"#5-递归返回返回到初始调用\">#</a> 5. 递归返回：返回到初始调用</h5>\n<ul>\n<li>\n<p><strong>完成  <code>convert(a + 1, 48)</code>  后</strong>：</p>\n<ul>\n<li>执行  <code>*a = (483 % 10) + '0' = '3'</code> （ <code>a[0] = '3'</code> ）</li>\n</ul>\n</li>\n<li>\n<p><strong>调用栈</strong>：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">convert</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">483</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>赋值结果</strong>：</p>\n<ul>\n<li><code>a[0] = '3'</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可视化调用栈\"><a class=\"anchor\" href=\"#可视化调用栈\">#</a> 可视化调用栈</h3>\n<p>为了更直观地理解，让我们用图示表示递归调用和返回过程。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>调用栈顶部</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>┌────────────────────┐</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│ <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a + 2<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">)</span>  │</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│ 执行 *a = <span class=\"token string\">'4'</span>      │</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>└────────────────────┘</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      返回</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>┌────────────────────┐</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│ <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a + 1<span class=\"token punctuation\">,</span> 48<span class=\"token punctuation\">)</span> │</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│ 执行 *a = <span class=\"token string\">'8'</span>      │</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>└────────────────────┘</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      返回</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>┌────────────────────┐</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>│ <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> 483<span class=\"token punctuation\">)</span>     │</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>│ 执行 *a = <span class=\"token string\">'3'</span>      │</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>└────────────────────┘</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      返回</pre></td></tr></table></figure><p>每一次递归调用都会在栈上新增一个栈帧（函数调用的上下文），当一个调用完成后，控制权自动返回到上一个栈帧的位置，继续执行后续的代码。</p>\n</blockquote>\n<p>有时间细说这个递归</p>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241224140100206.png\" alt=\"image-20241224140100206\" /></p>\n<p><strong>先到这吧，4 道题花一上午，效率越来越低了，来两道数学去了。递归有点说法的，下个坑考虑开递归</strong></p>\n",
            "tags": [
                "C语言基础",
                "C语言",
                "基础",
                "算法"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/12/23/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92(%E4%BA%8C)/",
            "url": "https://0d0-1yp0.github.io/2024/12/23/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92(%E4%BA%8C)/",
            "title": "C语言入门知识点&基础思路（二）",
            "date_published": "2024-12-22T16:00:00.000Z",
            "content_html": "<p><strong>tips：本期有挑战题</strong></p>\n<blockquote>\n<p>你我不曾感受过</p>\n</blockquote>\n<h1 id=\"c语言笑传又来了说是\"><a class=\"anchor\" href=\"#c语言笑传又来了说是\">#</a> C 语言笑传又来了说是</h1>\n<p>最近用了 copilot，真不是一般的小机灵鬼，感觉被狠狠监视了</p>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223090938881.png\" alt=\"image-20241223090938881\" /></p>\n<p>你坝还啥也没写呢，先给我猜出来了</p>\n<p>练题还是把它老人家闭了吧，否则手写代码的时候直接变小丑</p>\n<p>上题！</p>\n<blockquote>\n<p>注意，以下答案仅供参考，指针这部分我也还在学习中，答案对了也可能不代表规范性适合严格的考试！</p>\n</blockquote>\n<h2 id=\"67字符串\"><a class=\"anchor\" href=\"#67字符串\">#</a> 6.7 字符串</h2>\n<blockquote>\n<p>我说我本来想学指针，结果突然发现字符串忘没了于是滚回去复习有人信吗哈哈哈哈哈哈哈</p>\n</blockquote>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223091738394.png\" alt=\"image-20241223091738394\" /></p>\n<p><strong>此题注意事项</strong>：</p>\n<ol>\n<li>博主脑子有点不灵活，先不上链表动态内存之类的高级操作，先用大数组苟分，后面再试高级操作（挖坑）</li>\n<li>打 pwn 后遗症犯了总想来点阴的</li>\n<li>同学，你的思路是什么？我的思路不一定就适合你哦</li>\n</ol>\n<h3 id=\"思路知识点\"><a class=\"anchor\" href=\"#思路知识点\">#</a> 思路知识点：</h3>\n<ol>\n<li>scanf (&quot;% s&quot;) 遇到空格就会停止读取，不会读入空格，在读取字符串时会自动在末尾添加 '\\0' 结束符（可以想象 scanf 格式化字符串的本质）</li>\n<li>gets (): 会自动添加 '\\0', 但不安全，已废弃（但也许考试的话是可以用的）</li>\n<li>如果要处理带空格的字符串输入，更推荐用 fgets ()（但也许考试的话是没必要的）</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>strlen () 不会把 '\\0' 计算在内，它只计算到 '\\0' 之前的字符个数，比如 &quot;hello&quot; 的 strlen () 结果是 5，但是 '\\0' 确实会占用数组的一个位置 (word [5])。</li>\n</ol>\n<blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'h'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'e'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'l'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'l'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'o'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span>   <span class=\"token comment\">//scanf 自动添加的结束符</span></pre></td></tr></table></figure></blockquote>\n<ol start=\"5\">\n<li>回车键 (\\n) 不会被 scanf (&quot;% s&quot;) 存储，如果用 fgets ()，回车符会被存储，并且 '\\0' 会在回车符之后</li>\n</ol>\n<p>是的我刚才拿 scanf 搓半天才发现自己是人机，阴 4 你 8 了</p>\n<p>上 wp！！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 别忘了，假设用 scanf 的话，字符串变量名本身就是个指针，不要加取地址符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 最后一个词算上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><s>&lt;u&gt; 好了我们可以去干一把指针了 &lt;/u&gt;</s></p>\n<h2 id=\"挑战87字符变换\"><a class=\"anchor\" href=\"#挑战87字符变换\">#</a> 挑战：8.7 字符变换</h2>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223101047226.png\" alt=\"image-20241223101047226\" /></p>\n<p>真成笑传了，西八</p>\n<h3 id=\"思路知识点-2\"><a class=\"anchor\" href=\"#思路知识点-2\">#</a> 思路知识点：</h3>\n<ol>\n<li>ASCII 中，32 是空格也就是上文的‘ ’，0-9 是 48-57，A-Z 是 65-90，a-z 是 97-122，也就是大写加 32 就是小写</li>\n<li>这个挑战只是题干长，我们用心想想是可以秒的。可以回看上面字符串在内存里的存储，可能可以更直观一点</li>\n<li>首尾相连考虑 strcat，注意它会干掉第一个 \\0</li>\n</ol>\n<blockquote>\n<p>char *strcat(char *dest, const char *src);</p>\n</blockquote>\n<ol start=\"4\">\n<li>\n<p>指针的基本知识要牢牢掌握，另外要理解字符和数字的变换</p>\n</li>\n<li>\n<p>思路上没有太复杂的东西，一定要注意 * 和 &amp; 的运用，以及字符串变量名指针的本质</p>\n</li>\n</ol>\n<p><strong>此题注意事项：</strong></p>\n<ol>\n<li>此题主要是指针部分比较难，可以对着源码回忆，想想如果是你你会怎么做</li>\n<li><s>好好读题，不要看见长题干就不想做，啊对我说的就是我自己</s></li>\n<li>由于函数传虚参实参规则，拿指针打会更稳</li>\n</ol>\n<p>我们先一步一步来，以下是我个人解题过程中进行的尝试</p>\n<p>对，都来看我没了 copilot 后的铸币操作吧哈哈哈哈哈哈哈我真得不想活辣！！</p>\n<h3 id=\"解题过程最终答案在最后面\"><a class=\"anchor\" href=\"#解题过程最终答案在最后面\">#</a> 解题过程（最终答案在最后面）:</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> lens<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StringCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 首尾相连完成了，暂时存在 c 里，其实就是为了方便第 slen/2 以后的字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>lens<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 开始遍历了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>lens<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>lens<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span><span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>lens<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source=%s\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 手动截断</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  lens<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">StringCode</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//   printf (\"原字符串 =% s\\n 新字符串 =% s\",a,b);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//   printf(\"source=%s\",a);</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以下是个人独白，各位低血压可以看看。其实写到这里就差一句话就成功了，可惜后面越改越偏：</p>\n<blockquote>\n<p>先到这里。输入 Weihua，得到的结果是 source=qeihua</p>\n<p>也就是 W 正常变了，其他的还没变，迈出了第一步。理论是可行的</p>\n<p>但是，为什么别的没有变呢？？？</p>\n<p>在第 10 行后加入 printf (&quot;source=% s\\n&quot;,c);，发现结果是</p>\n<p>source=WeihuaWeihua<br />\nsource=qeihua</p>\n<p>字符串正常拼接了。再把 i 全都打印发现确实已经循环过五次了，手动加的截断点也是正常的</p>\n<p>岂有此理？</p>\n<p>先把 a 和 b 加上吧，先不调试了，</p>\n<p>等等。。。。？？？？</p>\n</blockquote>\n<p>渐渐的写入迷了，导致忘记了题目，接下来半小时越改越偏</p>\n<p>最后突然发现，WTF 不对啊，我要打的不是差值吗，这给我干哪来了</p>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223143929154.png\" alt=\"image-20241223143929154\" /></p>\n<p>有时候就感觉这脑子里面装的是一坨</p>\n<p>好了，没啥想说的了已经，上最终 wp</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> lens<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StringCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 首尾相连完成了，暂时存在 c 里，其实就是为了方便第 slen/2 以后的字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lens<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>lens<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>lens<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 开始遍历了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span><span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span>lens<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  lens<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">StringCode</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"old=%s\\nnew=%s\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223144241980.png\" alt=\"image-20241223144241980\" /></p>\n<p>AI 依赖有时候真的会导致搓代码搓一半开始自嗨了，唉</p>\n<p>今天就先做到这吧，已经铸币了</p>\n<p>不懂的可以到 csdn dd 我，我看到后一定第一时间尽力解答</p>\n",
            "tags": [
                "C语言基础",
                "C语言",
                "基础",
                "算法"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "C语言入门知识点&基础思路（一）",
            "date_published": "2024-12-19T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>giants</p>\n</blockquote>\n<h1 id=\"c语言笑传之猜猜背一\"><a class=\"anchor\" href=\"#c语言笑传之猜猜背一\">#</a> C 语言笑传之猜猜背（一）</h1>\n<p>半年没碰 c 语言入门题，已成咸鱼矣</p>\n<p>遂，have a try</p>\n<p>古语有云，c 语言入门必刷青览，古语有云，难度不如 OI 一根</p>\n<p>我又不如青览一根，何如？算了哪有不疯的</p>\n<h2 id=\"取位\"><a class=\"anchor\" href=\"#取位\">#</a> 取位</h2>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/a61073f9479408aca71660bb68c40c0.png\" alt=\"a61073f9479408aca71660bb68c40c0\" /></p>\n<p>说实话半年没摸真忘了是取位，还以为 a<em>100+b</em>10+c 这种操作来着</p>\n<p>难度不大，就是旁边的师弟差点没把我气死矣</p>\n<h3 id=\"思路知识点\"><a class=\"anchor\" href=\"#思路知识点\">#</a> 思路知识点：</h3>\n<ol>\n<li>取位的操作也就是利用好取余和整数除 10 即可</li>\n</ol>\n<p><strong>此题注意事项</strong>：</p>\n<ol>\n<li>取的位自己验一下就行</li>\n</ol>\n<p>上 wp</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> i<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> i<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果不知 1000 的话就得用表达式表示范围了，以后再说</p>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<p><img loading=\"lazy\" src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/7b499f6356e89f60fcb83ae96dda62f.png\" alt=\"7b499f6356e89f60fcb83ae96dda62f\" /></p>\n<p>善，我入个门，不输出就行，删除什么链表什么 free 什么的，有缘再叙！</p>\n<p>掐指一算，我就多开一个数组负责标记好了</p>\n<h3 id=\"思路知识点-2\"><a class=\"anchor\" href=\"#思路知识点-2\">#</a> 思路知识点：</h3>\n<p>​\t这里就没啥知识点了，硬说的话，用另一个数组做标记算思路吧</p>\n<p><strong>此题注意事项</strong>：</p>\n<ol>\n<li>博主之前第 10 行不小心写的 i++。第 12 行不小心写的 j [i] == 1</li>\n<li>少看多做，看和做是两回事</li>\n</ol>\n<p>代码别写错</p>\n<p>废话少说，show me the code！！！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下播！</p>\n<p>D's domain</p>\n<p>24/12/20</p>\n",
            "tags": [
                "C语言基础",
                "C语言",
                "基础",
                "算法"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/",
            "url": "https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/",
            "title": "堆栈不平衡，布栈",
            "date_published": "2024-11-27T16:00:00.000Z",
            "content_html": "<h1 id=\"堆栈不平衡\"><a class=\"anchor\" href=\"#堆栈不平衡\">#</a> 堆栈不平衡</h1>\n<p>通常是由于函数调用和返回过程中堆栈操作的不匹配。每当调用一个函数时，程序会将当前的栈指针（SP）和返回地址压入堆栈，这会影响到后续的堆栈操作。</p>\n<p>例如，假设一个函数调用  <code>func</code> ，在进入  <code>func</code>  时，栈指针会增加（即压入返回地址）。如果在  <code>func</code>  中未正确地平衡堆栈（比如未能弹出相应的值），那么在返回时，栈指针可能会指向一个不正确的位置，导致堆栈不平衡。</p>\n<p>至于栈指针的修改，可以通过调整指令来确保调用的函数有正确的返回地址。例如，修改  <code>call</code>  指令的目标地址为  <code>0</code> ，可以防止调用某个函数，这在某些逆向工程中是用于跳过不必要的函数调用或陷阱，达到对程序行为的控制。</p>\n<p>简单来说，理解堆栈的操作顺序和调用约定是非常重要的。通过反汇编工具分析这些操作，可以更好地理解程序的执行流程和潜在的漏洞。你可以从调试程序，观察栈的变化入手，加深对这些概念的理解。</p>\n<p>要深入理解堆栈不平衡的问题，我们可以从堆栈的工作原理和汇编代码角度进行分析。</p>\n<h3 id=\"1-堆栈的基本概念\"><a class=\"anchor\" href=\"#1-堆栈的基本概念\">#</a> 1. 堆栈的基本概念</h3>\n<p>堆栈是一种后进先出（LIFO）的数据结构，用于存储函数调用的信息，包括返回地址、局部变量和参数。堆栈的顶端通常由栈指针（SP）指向。</p>\n<h3 id=\"2-函数调用的过程\"><a class=\"anchor\" href=\"#2-函数调用的过程\">#</a> 2. 函数调用的过程</h3>\n<p>当一个函数被调用时，会执行以下步骤：</p>\n<ol>\n<li><strong>保存返回地址</strong>：调用指令（如  <code>call func</code> ）会将当前指令的下一条地址压入堆栈。</li>\n<li><strong>调整栈指针</strong>：栈指针会减少（在 x86 架构中，栈向下增长）。</li>\n<li><strong>进入函数体</strong>：函数内部可以通过栈来存储局部变量。</li>\n</ol>\n<h4 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> 示例代码</h4>\n<pre><code class=\"language-assembly\">push ebp           ; 保存旧的基指针\nmov ebp, esp      ; 设置新的基指针\nsub esp, 16       ; 为局部变量分配空间\n\n; 函数体\n\nmov esp, ebp      ; 恢复栈指针\npop ebp           ; 恢复旧的基指针\nret                ; 返回\n</code></pre>\n<h3 id=\"3-堆栈不平衡的原因\"><a class=\"anchor\" href=\"#3-堆栈不平衡的原因\">#</a> 3. 堆栈不平衡的原因</h3>\n<p>如果在函数中未正确弹出压入的值，或者在返回之前没有恢复堆栈状态，就会导致堆栈不平衡。比如，如果你在函数内部多次压入值而没有相应的弹出，堆栈将继续增长，最终导致溢出。</p>\n<h3 id=\"4-栈指针的修改\"><a class=\"anchor\" href=\"#4-栈指针的修改\">#</a> 4. 栈指针的修改</h3>\n<p>栈指针的修改通常涉及  <code>push</code>  和  <code>pop</code>  指令。例如，如果需要跳过某个函数的执行，可以将  <code>call</code>  指令的目标地址更改为  <code>0</code> ，这样不会实际调用任何函数，从而避免栈指针的进一步修改。</p>\n<h4 id=\"伪代码示例\"><a class=\"anchor\" href=\"#伪代码示例\">#</a> 伪代码示例</h4>\n<pre><code class=\"language-assembly\">call 0x0         ; 不会改变堆栈状态\n</code></pre>\n<h3 id=\"5-可视化结构图\"><a class=\"anchor\" href=\"#5-可视化结构图\">#</a> 5. 可视化结构图</h3>\n<pre><code>[ ESP ]   --&gt;  | Return Address | &lt;-- call func\n               | Local Var 1    |\n               | Local Var 2    |\n               | ...            |\n               | Old EBP        |\n[ EBP ]   --&gt;  | Base Pointer   |\n</code></pre>\n<h3 id=\"6-逆向工程的实用技巧\"><a class=\"anchor\" href=\"#6-逆向工程的实用技巧\">#</a> 6. 逆向工程的实用技巧</h3>\n<ul>\n<li><strong>使用调试工具</strong>：例如 GDB 或 x64dbg，逐步执行代码，观察堆栈的变化。</li>\n<li><strong>分析调用约定</strong>：了解不同平台（如 x86 和 x64）的调用约定，这对逆向非常重要。</li>\n<li><strong>编写脚本</strong>：可以使用 Python 等语言结合工具（如 IDA Pro 或 Ghidra）自动化分析任务。</li>\n</ul>\n<p>掌握这些基础知识后，继续深入学习汇编语言和计算机体系结构将有助于你成为真正的逆向工程大师！</p>\n<h1 id=\"布栈\"><a class=\"anchor\" href=\"#布栈\">#</a> 布栈</h1>\n<blockquote>\n<p>教我做一道 CTF 中的 pwn 题: #!/usr/bin/env python from pwn import *  sh = process ('./ret2libc1')  binsh_addr = 0x8048720 system_plt = 0x08048460 payload = flat ([b'a' * 112, system_plt, b'b' * 4, binsh_addr]) sh.sendline (payload)  sh.interactive () 这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以 'bbbb' 作为虚假的地址，其后参数对应的参数内容。  你看他布栈的时候，为什么要 system_plt 后面要布一个虚假的地址，然后才是参数呢，这里没太懂</p>\n</blockquote>\n<p>这道题目是典型的 <strong>ret2libc</strong> 攻击 (Return-to-libc)，目标是通过覆盖栈上的返回地址，绕过程序的正常流程，转而调用  <code>system()</code>  函数来执行命令（在这个例子中是  <code>/bin/sh</code> ）。为了理解为什么  <code>system_plt</code>  后面需要填充一个虚假的地址（ <code>b'b' * 4</code> ），我们需要详细分析下栈结构和函数调用的过程。</p>\n<h3 id=\"背景知识\"><a class=\"anchor\" href=\"#背景知识\">#</a> 背景知识</h3>\n<p>在  <code>x86</code>  架构的程序中，函数调用的基本过程如下：</p>\n<ol>\n<li><strong>压栈</strong>：当一个函数被调用时，程序会将当前的 <strong>返回地址</strong> 压入栈中，这个返回地址是程序调用该函数后，程序应该跳转回来的地址。</li>\n<li><strong>参数传递</strong>：在栈上，函数的参数会紧随返回地址之后依次被压入栈中。</li>\n<li><strong>栈帧结构</strong>：每次函数调用时，都会为该函数分配一个栈帧，栈帧中包含：\n<ul>\n<li><strong>返回地址</strong>：指向调用函数之后的代码位置。</li>\n<li><strong>参数</strong>：该函数的参数。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"攻击思路\"><a class=\"anchor\" href=\"#攻击思路\">#</a> 攻击思路</h3>\n<p>在这道题中，我们要利用程序中的漏洞，覆盖栈上的返回地址，使得程序在执行  <code>ret</code> （返回指令）时跳到我们指定的地址，也就是  <code>system()</code>  函数的地址。</p>\n<h3 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sh <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ret2libc1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>binsh_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x8048720</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>system_plt <span class=\"token operator\">=</span> <span class=\"token number\">0x08048460</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">112</span><span class=\"token punctuation\">,</span> system_plt<span class=\"token punctuation\">,</span> <span class=\"token string\">b'b'</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> binsh_addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li>\n<p><strong> <code>binsh_addr = 0x8048720</code> </strong>：这是我们要传给  <code>system()</code>  函数的参数地址，也就是  <code>/bin/sh</code>  字符串的地址。 <code>system()</code>  函数需要一个字符串参数，在这里我们传递的是  <code>/bin/sh</code>  的地址， <code>system()</code>  会执行该命令，启动一个 shell。</p>\n</li>\n<li>\n<p><strong> <code>system_plt = 0x08048460</code> </strong>：这是  <code>system</code>  函数的地址，在程序中的 <strong>PLT（Procedure Linkage Table）</strong> 区域。PLT 是程序用来调用动态库函数的一个表，每当程序要调用动态库中的函数时，都会先跳转到 PLT 处，由 PLT 去调用函数的实际地址。</p>\n</li>\n<li>\n<p><strong> <code>payload = flat([b'a' * 112, system_plt, b'b' * 4, binsh_addr])</code> </strong>：</p>\n<ul>\n<li><strong> <code>b'a' * 112</code> </strong>：这里填充的是  <code>112</code>  个字节  <code>a</code> ，这是覆盖栈帧到返回地址的部分。程序会首先执行一些前期的操作（例如栈的初始化、局部变量等），然后遇到返回地址。因为栈的布局是从高地址到低地址的，所以我们填充  <code>a</code>  字符来覆盖返回地址的空间，确保在覆盖掉返回地址后，后面的内容是我们想要填充的内容。</li>\n<li><strong> <code>system_plt</code> </strong>：这是我们覆盖的返回地址。当栈上的返回地址被覆盖为  <code>system_plt</code>  后，程序将跳转到  <code>system()</code>  函数。这个  <code>system_plt</code>  的地址是硬编码的，它会让程序跳转到  <code>system()</code>  的实际地址。注意，这个地址是 PLT 表中的地址，在动态链接的程序中，PLT 是一个跳转表，用于跳转到  <code>system</code>  函数的实际实现地址。</li>\n<li><strong> <code>b'b' * 4</code> </strong>：这是一个 <strong>虚假的返回地址</strong>，也就是说这是我们填充在  <code>system_plt</code>  后的一个占位符。这个部分的大小是  <code>4</code>  字节（通常是  <code>x86</code>  架构的指针大小）。为什么要填充这个虚假的返回地址呢？因为  <code>system()</code>  函数的调用约定是需要一个参数（即  <code>/bin/sh</code>  的地址）。这个虚假的返回地址用于模拟栈上  <code>system()</code>  函数执行完之后返回的地址。我们这样做是为了让栈结构保持正确，在调用  <code>system()</code>  时，栈帧结构要完整，所以我们需要一个假的返回地址来确保  <code>system()</code>  执行完成后能正确返回。实际上，在这道题中，虚假的地址  <code>b'b' * 4</code>  会被  <code>system()</code>  执行后丢弃。</li>\n<li><strong> <code>binsh_addr</code> </strong>：这是我们传递给  <code>system()</code>  函数的参数  <code>/bin/sh</code>  字符串的地址。 <code>system()</code>  函数需要一个字符串作为参数，这个参数是  <code>system()</code>  在执行时使用的命令，告诉它启动一个 shell。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>sh.sendline(payload)</code> </strong>：这一行是将构造好的 payload 发送到程序中，触发栈的溢出和返回地址的修改。</p>\n</li>\n<li>\n<p><strong> <code>sh.interactive()</code> </strong>：执行完 payload 后，程序将进入交互模式，让我们与程序进行交互，通常在这种 CTF 题目中，这意味着我们已经成功地获得了一个 shell，可以执行命令。</p>\n</li>\n</ol>\n<h3 id=\"为什么要填充虚假的地址\"><a class=\"anchor\" href=\"#为什么要填充虚假的地址\">#</a> 为什么要填充虚假的地址？</h3>\n<p>在调用  <code>system()</code>  函数时，通常在栈上需要有一个返回地址，指示函数执行完之后应该跳转到哪里。由于  <code>system()</code>  是一个库函数，它执行完成后并不会返回到一个特定的地址，而是会根据调用栈返回到调用它的地方。但是，由于我们要用  <code>ret2libc</code>  攻击来绕过正常的程序流程，我们通过修改返回地址，使得程序跳转到  <code>system()</code>  函数。但是  <code>system()</code>  函数的调用约定仍然需要栈上有一个正确的返回地址（即调用  <code>system()</code>  后程序会跳回的地址）。</p>\n<ul>\n<li>由于  <code>system()</code>  在执行后会返回，我们需要一个虚假的返回地址来填补栈上的空隙，确保栈帧结构完整。</li>\n<li>我们用  <code>b'b' * 4</code>  来填充这个虚假的返回地址。这里的  <code>4</code>  字节是因为在 x86 架构中，返回地址是一个指针，占用 4 字节。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li><strong> <code>system_plt</code> </strong> 是我们想跳转到的地址，即  <code>system()</code>  函数的入口。</li>\n<li><strong>虚假的返回地址 ( <code>b'b' * 4</code> )</strong> 用于保证栈帧的完整性，它只是一个占位符。 <code>system()</code>  执行后会跳过这个虚假的地址，并且返回到  <code>system()</code>  函数的调用者。</li>\n<li><strong> <code>binsh_addr</code> </strong> 是传递给  <code>system()</code>  函数的参数，即  <code>/bin/sh</code>  的地址， <code>system()</code>  会执行它，启动一个 shell。</li>\n</ul>\n<p>这个过程通过巧妙地控制栈上的返回地址，利用系统中已经存在的库函数来执行恶意代码，从而达到绕过程序控制并获取 shell 的目的。</p>\n",
            "tags": [
                "CTF",
                "二进制安全",
                "基础",
                "二进制",
                "CTF"
            ]
        }
    ]
}