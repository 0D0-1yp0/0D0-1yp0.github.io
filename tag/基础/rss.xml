<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>we1c0me_t0 my odyssey domain</title>
        <subtitle>&#34; 一切选择，都有其意义 &#34; —— 《VALORANT》 ISO</subtitle>
        <icon>https://0d0-1yp0.github.io/assets/favicon.ico</icon>
        <link>https://0d0-1yp0.github.io</link>
        <author>
          <name>0d0_1yp0</name>
        </author>
        <description>ps:当前站版本v1.11。右上角可以切换日夜主题。手机端左上角是功能栏。遇到长时间加载是bug需要刷新。目前文章只往csdn搬https://blog.csdn.net/2201_75506722?type=blog</description>
        <language>zh-cn</language>
        <pubDate>Fri, 20 Dec 2024 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 20 Dec 2024 00:00:00 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/</guid>
            <title>C语言入门回归（一）</title>
            <link>https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/</link>
            <category term="C语言基础" scheme="https://0d0-1yp0.github.io/categories/basic-C/" />
            <category term="C语言" scheme="https://0d0-1yp0.github.io/tags/C%E8%AF%AD%E8%A8%80/" />
            <category term="基础" scheme="https://0d0-1yp0.github.io/tags/%E5%9F%BA%E7%A1%80/" />
            <category term="算法" scheme="https://0d0-1yp0.github.io/tags/%E7%AE%97%E6%B3%95/" />
            <pubDate>Fri, 20 Dec 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;还木写完先开个坑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#还木写完先开个坑&#34;&gt;#&lt;/a&gt; 还木写完 ^^ 先开个坑&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;c语言入门回归一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言入门回归一&#34;&gt;#&lt;/a&gt; C 语言入门回归（一）&lt;/h1&gt;
&lt;p&gt;半年没碰 c 语言入门题，已成咸鱼矣&lt;/p&gt;
&lt;p&gt;遂，have a try&lt;/p&gt;
&lt;p&gt;古语有云，c 语言入门必刷青览，古语有云，难度不如 OI 一根&lt;/p&gt;
&lt;p&gt;我又不如青览一根，何如？算了哪有不疯的&lt;/p&gt;
&lt;h2 id=&#34;取位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#取位&#34;&gt;#&lt;/a&gt; 取位&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/a61073f9479408aca71660bb68c40c0.png&#34; alt=&#34;a61073f9479408aca71660bb68c40c0&#34; /&gt;&lt;/p&gt;
&lt;p&gt;说实话半年没摸真忘了是取位，还以为 a&lt;em&gt;100+b&lt;/em&gt;10+c 这种操作来着&lt;/p&gt;
&lt;p&gt;难度不大，就是师弟不知为何就是不懂，差点没把我气死矣&lt;/p&gt;
&lt;p&gt;上 wp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include&amp;lt;stdio.h&amp;gt;
int main()
&amp;#123;
  for (int i = 10; i &amp;lt;=100; i++)  if (i%10 == i/10) printf(&amp;quot;%d &amp;quot;,i); 
  for (int i = 100; i &amp;lt;=1000; i++) if (i%10 == i/100) printf(&amp;quot;%d &amp;quot;,i); 
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不知 1000 的话就得用表达式表示范围了，以后再说&lt;/p&gt;
&lt;h2 id=&#34;数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/7b499f6356e89f60fcb83ae96dda62f.png&#34; alt=&#34;7b499f6356e89f60fcb83ae96dda62f&#34; /&gt;&lt;/p&gt;
&lt;p&gt;善，我入个门，不输出就行，删除什么链表什么 free 什么的，有缘再叙！&lt;/p&gt;
&lt;p&gt;掐指一算，我就多开一个数组负责标记好了&lt;/p&gt;
&lt;p&gt;然后？代码别写错&lt;/p&gt;
&lt;p&gt;废话少说，show me the code！！！&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    j&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; k&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第 10 行不小心写的 i++。第 12 行不小心写的 j [i] == 1&lt;/p&gt;
&lt;p&gt;少看多做，看和做是两回事&lt;/p&gt;
&lt;p&gt;下播！&lt;/p&gt;
&lt;p&gt;D&#39;s domain&lt;/p&gt;
&lt;p&gt;24/12/20&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/</guid>
            <title>堆栈不平衡，布栈</title>
            <link>https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/</link>
            <category term="CTF" scheme="https://0d0-1yp0.github.io/categories/CTF/" />
            <category term="二进制安全" scheme="https://0d0-1yp0.github.io/categories/CTF/binary/" />
            <category term="基础" scheme="https://0d0-1yp0.github.io/tags/%E5%9F%BA%E7%A1%80/" />
            <category term="二进制" scheme="https://0d0-1yp0.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/" />
            <category term="CTF" scheme="https://0d0-1yp0.github.io/tags/CTF/" />
            <pubDate>Thu, 28 Nov 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;堆栈不平衡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆栈不平衡&#34;&gt;#&lt;/a&gt; 堆栈不平衡&lt;/h1&gt;
&lt;p&gt;通常是由于函数调用和返回过程中堆栈操作的不匹配。每当调用一个函数时，程序会将当前的栈指针（SP）和返回地址压入堆栈，这会影响到后续的堆栈操作。&lt;/p&gt;
&lt;p&gt;例如，假设一个函数调用  &lt;code&gt;func&lt;/code&gt; ，在进入  &lt;code&gt;func&lt;/code&gt;  时，栈指针会增加（即压入返回地址）。如果在  &lt;code&gt;func&lt;/code&gt;  中未正确地平衡堆栈（比如未能弹出相应的值），那么在返回时，栈指针可能会指向一个不正确的位置，导致堆栈不平衡。&lt;/p&gt;
&lt;p&gt;至于栈指针的修改，可以通过调整指令来确保调用的函数有正确的返回地址。例如，修改  &lt;code&gt;call&lt;/code&gt;  指令的目标地址为  &lt;code&gt;0&lt;/code&gt; ，可以防止调用某个函数，这在某些逆向工程中是用于跳过不必要的函数调用或陷阱，达到对程序行为的控制。&lt;/p&gt;
&lt;p&gt;简单来说，理解堆栈的操作顺序和调用约定是非常重要的。通过反汇编工具分析这些操作，可以更好地理解程序的执行流程和潜在的漏洞。你可以从调试程序，观察栈的变化入手，加深对这些概念的理解。&lt;/p&gt;
&lt;p&gt;要深入理解堆栈不平衡的问题，我们可以从堆栈的工作原理和汇编代码角度进行分析。&lt;/p&gt;
&lt;h3 id=&#34;1-堆栈的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-堆栈的基本概念&#34;&gt;#&lt;/a&gt; 1. 堆栈的基本概念&lt;/h3&gt;
&lt;p&gt;堆栈是一种后进先出（LIFO）的数据结构，用于存储函数调用的信息，包括返回地址、局部变量和参数。堆栈的顶端通常由栈指针（SP）指向。&lt;/p&gt;
&lt;h3 id=&#34;2-函数调用的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-函数调用的过程&#34;&gt;#&lt;/a&gt; 2. 函数调用的过程&lt;/h3&gt;
&lt;p&gt;当一个函数被调用时，会执行以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;保存返回地址&lt;/strong&gt;：调用指令（如  &lt;code&gt;call func&lt;/code&gt; ）会将当前指令的下一条地址压入堆栈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调整栈指针&lt;/strong&gt;：栈指针会减少（在 x86 架构中，栈向下增长）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进入函数体&lt;/strong&gt;：函数内部可以通过栈来存储局部变量。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;示例代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例代码&#34;&gt;#&lt;/a&gt; 示例代码&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;push ebp           ; 保存旧的基指针
mov ebp, esp      ; 设置新的基指针
sub esp, 16       ; 为局部变量分配空间

; 函数体

mov esp, ebp      ; 恢复栈指针
pop ebp           ; 恢复旧的基指针
ret                ; 返回
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-堆栈不平衡的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-堆栈不平衡的原因&#34;&gt;#&lt;/a&gt; 3. 堆栈不平衡的原因&lt;/h3&gt;
&lt;p&gt;如果在函数中未正确弹出压入的值，或者在返回之前没有恢复堆栈状态，就会导致堆栈不平衡。比如，如果你在函数内部多次压入值而没有相应的弹出，堆栈将继续增长，最终导致溢出。&lt;/p&gt;
&lt;h3 id=&#34;4-栈指针的修改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-栈指针的修改&#34;&gt;#&lt;/a&gt; 4. 栈指针的修改&lt;/h3&gt;
&lt;p&gt;栈指针的修改通常涉及  &lt;code&gt;push&lt;/code&gt;  和  &lt;code&gt;pop&lt;/code&gt;  指令。例如，如果需要跳过某个函数的执行，可以将  &lt;code&gt;call&lt;/code&gt;  指令的目标地址更改为  &lt;code&gt;0&lt;/code&gt; ，这样不会实际调用任何函数，从而避免栈指针的进一步修改。&lt;/p&gt;
&lt;h4 id=&#34;伪代码示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪代码示例&#34;&gt;#&lt;/a&gt; 伪代码示例&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;call 0x0         ; 不会改变堆栈状态
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-可视化结构图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-可视化结构图&#34;&gt;#&lt;/a&gt; 5. 可视化结构图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[ ESP ]   --&amp;gt;  | Return Address | &amp;lt;-- call func
               | Local Var 1    |
               | Local Var 2    |
               | ...            |
               | Old EBP        |
[ EBP ]   --&amp;gt;  | Base Pointer   |
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6-逆向工程的实用技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-逆向工程的实用技巧&#34;&gt;#&lt;/a&gt; 6. 逆向工程的实用技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用调试工具&lt;/strong&gt;：例如 GDB 或 x64dbg，逐步执行代码，观察堆栈的变化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析调用约定&lt;/strong&gt;：了解不同平台（如 x86 和 x64）的调用约定，这对逆向非常重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编写脚本&lt;/strong&gt;：可以使用 Python 等语言结合工具（如 IDA Pro 或 Ghidra）自动化分析任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;掌握这些基础知识后，继续深入学习汇编语言和计算机体系结构将有助于你成为真正的逆向工程大师！&lt;/p&gt;
&lt;h1 id=&#34;布栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#布栈&#34;&gt;#&lt;/a&gt; 布栈&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;教我做一道 CTF 中的 pwn 题: #!/usr/bin/env python from pwn import *  sh = process (&#39;./ret2libc1&#39;)  binsh_addr = 0x8048720 system_plt = 0x08048460 payload = flat ([b&#39;a&#39; * 112, system_plt, b&#39;b&#39; * 4, binsh_addr]) sh.sendline (payload)  sh.interactive () 这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以 &#39;bbbb&#39; 作为虚假的地址，其后参数对应的参数内容。  你看他布栈的时候，为什么要 system_plt 后面要布一个虚假的地址，然后才是参数呢，这里没太懂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题目是典型的 &lt;strong&gt;ret2libc&lt;/strong&gt; 攻击 (Return-to-libc)，目标是通过覆盖栈上的返回地址，绕过程序的正常流程，转而调用  &lt;code&gt;system()&lt;/code&gt;  函数来执行命令（在这个例子中是  &lt;code&gt;/bin/sh&lt;/code&gt; ）。为了理解为什么  &lt;code&gt;system_plt&lt;/code&gt;  后面需要填充一个虚假的地址（ &lt;code&gt;b&#39;b&#39; * 4&lt;/code&gt; ），我们需要详细分析下栈结构和函数调用的过程。&lt;/p&gt;
&lt;h3 id=&#34;背景知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景知识&#34;&gt;#&lt;/a&gt; 背景知识&lt;/h3&gt;
&lt;p&gt;在  &lt;code&gt;x86&lt;/code&gt;  架构的程序中，函数调用的基本过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;压栈&lt;/strong&gt;：当一个函数被调用时，程序会将当前的 &lt;strong&gt;返回地址&lt;/strong&gt; 压入栈中，这个返回地址是程序调用该函数后，程序应该跳转回来的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数传递&lt;/strong&gt;：在栈上，函数的参数会紧随返回地址之后依次被压入栈中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;栈帧结构&lt;/strong&gt;：每次函数调用时，都会为该函数分配一个栈帧，栈帧中包含：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;返回地址&lt;/strong&gt;：指向调用函数之后的代码位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数&lt;/strong&gt;：该函数的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;攻击思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击思路&#34;&gt;#&lt;/a&gt; 攻击思路&lt;/h3&gt;
&lt;p&gt;在这道题中，我们要利用程序中的漏洞，覆盖栈上的返回地址，使得程序在执行  &lt;code&gt;ret&lt;/code&gt; （返回指令）时跳到我们指定的地址，也就是  &lt;code&gt;system()&lt;/code&gt;  函数的地址。&lt;/p&gt;
&lt;h3 id=&#34;分析代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分析代码&#34;&gt;#&lt;/a&gt; 分析代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sh &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./ret2libc1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;binsh_addr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x8048720&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;system_plt &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x08048460&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; flat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;a&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;112&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; system_plt&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;b&#39;b&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; binsh_addr&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;binsh_addr = 0x8048720&lt;/code&gt; &lt;/strong&gt;：这是我们要传给  &lt;code&gt;system()&lt;/code&gt;  函数的参数地址，也就是  &lt;code&gt;/bin/sh&lt;/code&gt;  字符串的地址。 &lt;code&gt;system()&lt;/code&gt;  函数需要一个字符串参数，在这里我们传递的是  &lt;code&gt;/bin/sh&lt;/code&gt;  的地址， &lt;code&gt;system()&lt;/code&gt;  会执行该命令，启动一个 shell。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;system_plt = 0x08048460&lt;/code&gt; &lt;/strong&gt;：这是  &lt;code&gt;system&lt;/code&gt;  函数的地址，在程序中的 &lt;strong&gt;PLT（Procedure Linkage Table）&lt;/strong&gt; 区域。PLT 是程序用来调用动态库函数的一个表，每当程序要调用动态库中的函数时，都会先跳转到 PLT 处，由 PLT 去调用函数的实际地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;payload = flat([b&#39;a&#39; * 112, system_plt, b&#39;b&#39; * 4, binsh_addr])&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;b&#39;a&#39; * 112&lt;/code&gt; &lt;/strong&gt;：这里填充的是  &lt;code&gt;112&lt;/code&gt;  个字节  &lt;code&gt;a&lt;/code&gt; ，这是覆盖栈帧到返回地址的部分。程序会首先执行一些前期的操作（例如栈的初始化、局部变量等），然后遇到返回地址。因为栈的布局是从高地址到低地址的，所以我们填充  &lt;code&gt;a&lt;/code&gt;  字符来覆盖返回地址的空间，确保在覆盖掉返回地址后，后面的内容是我们想要填充的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;system_plt&lt;/code&gt; &lt;/strong&gt;：这是我们覆盖的返回地址。当栈上的返回地址被覆盖为  &lt;code&gt;system_plt&lt;/code&gt;  后，程序将跳转到  &lt;code&gt;system()&lt;/code&gt;  函数。这个  &lt;code&gt;system_plt&lt;/code&gt;  的地址是硬编码的，它会让程序跳转到  &lt;code&gt;system()&lt;/code&gt;  的实际地址。注意，这个地址是 PLT 表中的地址，在动态链接的程序中，PLT 是一个跳转表，用于跳转到  &lt;code&gt;system&lt;/code&gt;  函数的实际实现地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;b&#39;b&#39; * 4&lt;/code&gt; &lt;/strong&gt;：这是一个 &lt;strong&gt;虚假的返回地址&lt;/strong&gt;，也就是说这是我们填充在  &lt;code&gt;system_plt&lt;/code&gt;  后的一个占位符。这个部分的大小是  &lt;code&gt;4&lt;/code&gt;  字节（通常是  &lt;code&gt;x86&lt;/code&gt;  架构的指针大小）。为什么要填充这个虚假的返回地址呢？因为  &lt;code&gt;system()&lt;/code&gt;  函数的调用约定是需要一个参数（即  &lt;code&gt;/bin/sh&lt;/code&gt;  的地址）。这个虚假的返回地址用于模拟栈上  &lt;code&gt;system()&lt;/code&gt;  函数执行完之后返回的地址。我们这样做是为了让栈结构保持正确，在调用  &lt;code&gt;system()&lt;/code&gt;  时，栈帧结构要完整，所以我们需要一个假的返回地址来确保  &lt;code&gt;system()&lt;/code&gt;  执行完成后能正确返回。实际上，在这道题中，虚假的地址  &lt;code&gt;b&#39;b&#39; * 4&lt;/code&gt;  会被  &lt;code&gt;system()&lt;/code&gt;  执行后丢弃。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;binsh_addr&lt;/code&gt; &lt;/strong&gt;：这是我们传递给  &lt;code&gt;system()&lt;/code&gt;  函数的参数  &lt;code&gt;/bin/sh&lt;/code&gt;  字符串的地址。 &lt;code&gt;system()&lt;/code&gt;  函数需要一个字符串作为参数，这个参数是  &lt;code&gt;system()&lt;/code&gt;  在执行时使用的命令，告诉它启动一个 shell。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sh.sendline(payload)&lt;/code&gt; &lt;/strong&gt;：这一行是将构造好的 payload 发送到程序中，触发栈的溢出和返回地址的修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sh.interactive()&lt;/code&gt; &lt;/strong&gt;：执行完 payload 后，程序将进入交互模式，让我们与程序进行交互，通常在这种 CTF 题目中，这意味着我们已经成功地获得了一个 shell，可以执行命令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;为什么要填充虚假的地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要填充虚假的地址&#34;&gt;#&lt;/a&gt; 为什么要填充虚假的地址？&lt;/h3&gt;
&lt;p&gt;在调用  &lt;code&gt;system()&lt;/code&gt;  函数时，通常在栈上需要有一个返回地址，指示函数执行完之后应该跳转到哪里。由于  &lt;code&gt;system()&lt;/code&gt;  是一个库函数，它执行完成后并不会返回到一个特定的地址，而是会根据调用栈返回到调用它的地方。但是，由于我们要用  &lt;code&gt;ret2libc&lt;/code&gt;  攻击来绕过正常的程序流程，我们通过修改返回地址，使得程序跳转到  &lt;code&gt;system()&lt;/code&gt;  函数。但是  &lt;code&gt;system()&lt;/code&gt;  函数的调用约定仍然需要栈上有一个正确的返回地址（即调用  &lt;code&gt;system()&lt;/code&gt;  后程序会跳回的地址）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于  &lt;code&gt;system()&lt;/code&gt;  在执行后会返回，我们需要一个虚假的返回地址来填补栈上的空隙，确保栈帧结构完整。&lt;/li&gt;
&lt;li&gt;我们用  &lt;code&gt;b&#39;b&#39; * 4&lt;/code&gt;  来填充这个虚假的返回地址。这里的  &lt;code&gt;4&lt;/code&gt;  字节是因为在 x86 架构中，返回地址是一个指针，占用 4 字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;system_plt&lt;/code&gt; &lt;/strong&gt; 是我们想跳转到的地址，即  &lt;code&gt;system()&lt;/code&gt;  函数的入口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚假的返回地址 ( &lt;code&gt;b&#39;b&#39; * 4&lt;/code&gt; )&lt;/strong&gt; 用于保证栈帧的完整性，它只是一个占位符。 &lt;code&gt;system()&lt;/code&gt;  执行后会跳过这个虚假的地址，并且返回到  &lt;code&gt;system()&lt;/code&gt;  函数的调用者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;binsh_addr&lt;/code&gt; &lt;/strong&gt; 是传递给  &lt;code&gt;system()&lt;/code&gt;  函数的参数，即  &lt;code&gt;/bin/sh&lt;/code&gt;  的地址， &lt;code&gt;system()&lt;/code&gt;  会执行它，启动一个 shell。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个过程通过巧妙地控制栈上的返回地址，利用系统中已经存在的库函数来执行恶意代码，从而达到绕过程序控制并获取 shell 的目的。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
