{
    "version": "https://jsonfeed.org/version/1",
    "title": "we1c0me_t0 my odyssey domain",
    "subtitle": "\" 一切选择，都有其意义 \" —— 《VALORANT》 ISO",
    "icon": "https://0d0-1yp0.github.io/assets/favicon.ico",
    "description": "ps:当前站版本v1.11。右上角可以切换日夜主题。手机端左上角是功能栏。遇到长时间加载是bug需要刷新。目前文章只往csdn搬https://blog.csdn.net/2201_75506722?type=blog",
    "home_page_url": "https://0d0-1yp0.github.io",
    "items": [
        {
            "id": "https://0d0-1yp0.github.io/2024/12/23/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92(%E4%BA%8C)/",
            "url": "https://0d0-1yp0.github.io/2024/12/23/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92(%E4%BA%8C)/",
            "title": "C语言入门知识点&基础思路（二）",
            "date_published": "2024-12-22T16:00:00.000Z",
            "content_html": "<p><strong>tips：本期有挑战题</strong></p>\n<blockquote>\n<p>你我不曾感受过</p>\n</blockquote>\n<h1 id=\"c语言笑传又来了说是\"><a class=\"anchor\" href=\"#c语言笑传又来了说是\">#</a> C 语言笑传又来了说是</h1>\n<p>最近用了 copilot，真不是一般的小机灵鬼，感觉被狠狠监视了</p>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223090938881.png\" alt=\"image-20241223090938881\" /></p>\n<p>你坝还啥也没写呢，先给我猜出来了</p>\n<p>练题还是把它老人家闭了吧，否则手写代码的时候直接变小丑</p>\n<p>上题！</p>\n<blockquote>\n<p>注意，以下答案仅供参考，指针这部分我也还在学习中，答案对了也可能不代表规范性适合严格的考试！</p>\n</blockquote>\n<h2 id=\"67字符串\"><a class=\"anchor\" href=\"#67字符串\">#</a> 6.7 字符串</h2>\n<blockquote>\n<p>我说我本来想学指针，结果突然发现字符串忘没了于是滚回去复习有人信吗哈哈哈哈哈哈哈</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5C86130%5CPictures%5C%E5%9B%BE%E5%BA%8A%5Cimage-20241223091738394.png\" alt=\"image-20241223091738394\" /></p>\n<p><strong>此题注意事项</strong>：</p>\n<ol>\n<li>博主脑子有点不灵活，先不上链表动态内存之类的高级操作，先用大数组苟分，后面再试高级操作（挖坑）</li>\n<li>打 pwn 后遗症犯了总想来点阴的</li>\n<li>同学，你的思路是什么？我的思路不一定就适合你哦</li>\n</ol>\n<h3 id=\"思路知识点\"><a class=\"anchor\" href=\"#思路知识点\">#</a> 思路知识点：</h3>\n<ol>\n<li>scanf (&quot;% s&quot;) 遇到空格就会停止读取，不会读入空格，在读取字符串时会自动在末尾添加 '\\0' 结束符（可以想象 scanf 格式化字符串的本质）</li>\n<li>gets (): 会自动添加 '\\0', 但不安全，已废弃（但也许考试的话是可以用的）</li>\n<li>如果要处理带空格的字符串输入，更推荐用 fgets ()（但也许考试的话是没必要的）</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>strlen () 不会把 '\\0' 计算在内，它只计算到 '\\0' 之前的字符个数，比如 &quot;hello&quot; 的 strlen () 结果是 5，但是 '\\0' 确实会占用数组的一个位置 (word [5])。</li>\n</ol>\n<blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'h'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'e'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'l'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'l'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'o'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>word<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span>   <span class=\"token comment\">//scanf 自动添加的结束符</span></pre></td></tr></table></figure></blockquote>\n<ol start=\"5\">\n<li>回车键 (\\n) 不会被 scanf (&quot;% s&quot;) 存储，如果用 fgets ()，回车符会被存储，并且 '\\0' 会在回车符之后</li>\n</ol>\n<p>是的我刚才拿 scanf 搓半天才发现自己是人机，阴 4 你 8 了</p>\n<p>上 wp！！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 别忘了，假设用 scanf 的话，字符串变量名本身就是个指针，不要加取地址符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 最后一个词算上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><s>&lt;u&gt; 好了我们可以去干一把指针了 &lt;/u&gt;</s></p>\n<h2 id=\"挑战87字符变换\"><a class=\"anchor\" href=\"#挑战87字符变换\">#</a> 挑战：8.7 字符变换</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223101047226.png\" alt=\"image-20241223101047226\" /></p>\n<p>真成笑传了，西八</p>\n<h3 id=\"思路知识点-2\"><a class=\"anchor\" href=\"#思路知识点-2\">#</a> 思路知识点：</h3>\n<ol>\n<li>ASCII 中，32 是空格也就是上文的‘ ’，0-9 是 48-57，A-Z 是 65-90，a-z 是 97-122，也就是大写加 32 就是小写</li>\n<li>这个挑战只是题干长，我们用心想想是可以秒的。可以回看上面字符串在内存里的存储，可能可以更直观一点</li>\n<li>首尾相连考虑 strcat，注意它会干掉第一个 \\0</li>\n</ol>\n<blockquote>\n<p>char *strcat(char *dest, const char *src);</p>\n</blockquote>\n<ol start=\"4\">\n<li>\n<p>指针的基本知识要牢牢掌握，另外要理解字符和数字的变换</p>\n</li>\n<li>\n<p>思路上没有太复杂的东西，一定要注意 * 和 &amp; 的运用，以及字符串变量名指针的本质</p>\n</li>\n</ol>\n<p><strong>此题注意事项：</strong></p>\n<ol>\n<li>此题主要是指针部分比较难，可以对着源码回忆，想想如果是你你会怎么做</li>\n<li><s>好好读题，不要看见长题干就不想做，啊对我说的就是我自己</s></li>\n<li>由于函数传虚参实参规则，拿指针打会更稳</li>\n</ol>\n<p>我们先一步一步来，以下是我个人解题过程中进行的尝试</p>\n<p>对，都来看我没了 copilot 后的铸币操作吧哈哈哈哈哈哈哈我真得不想活辣！！</p>\n<h3 id=\"解题过程最终答案在最后面\"><a class=\"anchor\" href=\"#解题过程最终答案在最后面\">#</a> 解题过程（最终答案在最后面）:</h3>\n<pre><code class=\"language-C\">#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#include&lt;stdlib.h&gt;\nint lens=0;\nvoid StringCode(char *a,char *b)\n&#123;\n    char c[200];\n    c[0]='\\0';\n    strcat(c,a);\n    strcat(c,a);//首尾相连完成了,暂时存在c里,其实就是为了方便第slen/2以后的字符\n    for(int i=0;i&lt;lens;i++)//开始遍历了\n      &#123;\n        if(*(c+i)-*(c+i+(lens/2)) &lt;'a')\n        &#123;\n            while (*(c+i)&lt;'a')  *(c+i)=*(c+i)+26;\n        &#125;\n        else if (*(c+i)-*(c+i+(lens/2)) &gt;'z')\n        &#123;\n            while (*(c+i)&gt;'z')  *(c+i)=*(c+i)-26;\n        &#125;\n        \n      &#125;\n    *(c+lens)='\\0';\n    printf(&quot;source=%s&quot;,c);//手动截断\n&#125;\n\nint main()\n&#123; \n  char a[100],b[100];\n  scanf(&quot;%s&quot;,a);\n  lens=strlen(a);\n  StringCode(a,b);\n//   printf(&quot;原字符串=%s\\n新字符串=%s&quot;,a,b);\n//   printf(&quot;source=%s&quot;,a);\n  return 0;\n&#125;\n</code></pre>\n<p>以下是个人独白，各位低血压可以看看。其实写到这里就差一句话就成功了，可惜后面越改越偏：</p>\n<blockquote>\n<p>先到这里。输入 Weihua，得到的结果是 source=qeihua</p>\n<p>也就是 W 正常变了，其他的还没变，迈出了第一步。理论是可行的</p>\n<p>但是，为什么别的没有变呢？？？</p>\n<p>在第 10 行后加入 printf (&quot;source=% s\\n&quot;,c);，发现结果是</p>\n<p>source=WeihuaWeihua<br />\nsource=qeihua</p>\n<p>字符串正常拼接了。再把 i 全都打印发现确实已经循环过五次了，手动加的截断点也是正常的</p>\n<p>岂有此理？</p>\n<p>先把 a 和 b 加上吧，先不调试了，</p>\n<p>等等。。。。？？？？</p>\n</blockquote>\n<p>渐渐的写入迷了，导致忘记了题目，接下来半小时越改越偏</p>\n<p>最后突然发现，WTF 不对啊，我要打的不是差值吗，这给我干哪来了</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5C86130%5CPictures%5C%E5%9B%BE%E5%BA%8A%5Cimage-20241223143929154.png\" alt=\"image-20241223143929154\" /></p>\n<p>有时候就感觉这脑子里面装的是一坨</p>\n<p>好了，没啥想说的了已经，上最终 wp</p>\n<pre><code class=\"language-C\">#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#include&lt;stdlib.h&gt;\nint lens=0;\nvoid StringCode(char *a,char *b)\n&#123;\n    char c[200];\n    c[0]='\\0';\n    strcat(c,a);\n    strcat(c,a);//首尾相连完成了,暂时存在c里,其实就是为了方便第slen/2以后的字符\n    for (int i = 0; i &lt; lens; i++) *(c+i)=*(c+i)-*(c+i+(lens/2));\n    for(int i=0;i&lt;lens;i++)//开始遍历了\n      &#123;\n        if(*(c+i) &lt;'a')  while (*(c+i)&lt;'a')  *(c+i)=*(c+i)+26;     \n        if (*(c+i) &gt;'z') while (*(c+i)&gt;'z')  *(c+i)=*(c+i)-26;\n        *(b+i)=*(c+i);\n      &#125;\n    *(b+lens)='\\0';\n&#125;\n\nint main()\n&#123; \n  char a[100],b[100];\n  scanf(&quot;%s&quot;,a);\n  lens=strlen(a);\n  StringCode(a,b);\n  printf(&quot;old=%s\\nnew=%s&quot;,a,b);\n  return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241223144241980.png\" alt=\"image-20241223144241980\" /></p>\n<p>AI 依赖有时候真的会导致搓代码搓一半开始自嗨了，唉</p>\n<p>今天就先做到这吧，已经铸币了</p>\n<p>不懂的可以到 csdn dd 我，我看到后一定第一时间尽力解答</p>\n",
            "tags": [
                "C语言基础",
                "C语言",
                "基础",
                "算法"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://0d0-1yp0.github.io/2024/12/20/basic-C/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%9B%9E%E5%BD%92%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "C语言入门知识点&基础思路（一）",
            "date_published": "2024-12-19T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>giants</p>\n</blockquote>\n<h1 id=\"c语言笑传之猜猜背一\"><a class=\"anchor\" href=\"#c语言笑传之猜猜背一\">#</a> C 语言笑传之猜猜背（一）</h1>\n<p>半年没碰 c 语言入门题，已成咸鱼矣</p>\n<p>遂，have a try</p>\n<p>古语有云，c 语言入门必刷青览，古语有云，难度不如 OI 一根</p>\n<p>我又不如青览一根，何如？算了哪有不疯的</p>\n<h2 id=\"取位\"><a class=\"anchor\" href=\"#取位\">#</a> 取位</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/a61073f9479408aca71660bb68c40c0.png\" alt=\"a61073f9479408aca71660bb68c40c0\" /></p>\n<p>说实话半年没摸真忘了是取位，还以为 a<em>100+b</em>10+c 这种操作来着</p>\n<p>难度不大，就是旁边的师弟差点没把我气死矣</p>\n<h3 id=\"思路知识点\"><a class=\"anchor\" href=\"#思路知识点\">#</a> 思路知识点：</h3>\n<ol>\n<li>取位的操作也就是利用好取余和整数除 10 即可</li>\n</ol>\n<p><strong>此题注意事项</strong>：</p>\n<ol>\n<li>取的位自己验一下就行</li>\n</ol>\n<p>上 wp</p>\n<pre><code class=\"language-C\">#include&lt;stdio.h&gt;\nint main()\n&#123;\n  for (int i = 10; i &lt;=100; i++)  if (i%10 == i/10) printf(&quot;%d &quot;,i); \n  for (int i = 100; i &lt;=1000; i++) if (i%10 == i/100) printf(&quot;%d &quot;,i); \n  return 0;\n&#125;\n</code></pre>\n<p>如果不知 1000 的话就得用表达式表示范围了，以后再说</p>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/7b499f6356e89f60fcb83ae96dda62f.png\" alt=\"7b499f6356e89f60fcb83ae96dda62f\" /></p>\n<p>善，我入个门，不输出就行，删除什么链表什么 free 什么的，有缘再叙！</p>\n<p>掐指一算，我就多开一个数组负责标记好了</p>\n<h3 id=\"思路知识点-2\"><a class=\"anchor\" href=\"#思路知识点-2\">#</a> 思路知识点：</h3>\n<p>​\t这里就没啥知识点了，硬说的话，用另一个数组做标记算思路吧</p>\n<p><strong>此题注意事项</strong>：</p>\n<ol>\n<li>博主之前第 10 行不小心写的 i++。第 12 行不小心写的 j [i] == 1</li>\n<li>少看多做，看和做是两回事</li>\n</ol>\n<p>代码别写错</p>\n<p>废话少说，show me the code！！！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下播！</p>\n<p>D's domain</p>\n<p>24/12/20</p>\n",
            "tags": [
                "C语言基础",
                "C语言",
                "基础",
                "算法"
            ]
        }
    ]
}