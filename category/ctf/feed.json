{
    "version": "https://jsonfeed.org/version/1",
    "title": "we1c0me_t0 my odyssey domain",
    "subtitle": "\" 一切选择，都有其意义 \" —— 《VALORANT》 ISO",
    "icon": "https://0d0-1yp0.github.io/assets/favicon.ico",
    "description": "ps:当前站版本v1.10。右上角可以切换日夜主题。遇到长时间加载是bug，可以刷新或者重进。目前文章只往csdn搬https://blog.csdn.net/2201_75506722?type=blog",
    "home_page_url": "https://0d0-1yp0.github.io",
    "items": [
        {
            "id": "https://0d0-1yp0.github.io/2024/12/22/CTF/crypto/%E4%BB%A5%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9C%9F%E6%AD%A3%E5%88%9D%E8%AF%86RSA/",
            "url": "https://0d0-1yp0.github.io/2024/12/22/CTF/crypto/%E4%BB%A5%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9C%9F%E6%AD%A3%E5%88%9D%E8%AF%86RSA/",
            "title": "以一道CTF题真正初识RSA",
            "date_published": "2024-12-21T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>给我的 crypto 入个门，入个门被数学✌薄纱</p>\n</blockquote>\n<p>本文借 (chao) 鉴 (xi) 了鄙校北神上课用的用例，希望明年上课的师弟搜到这个文章不会影响佬师上课啊哈哈哈 ww</p>\n<p>开始前可以看一眼 RSA 的基本原理，本文不会提到很深</p>\n<p><s>数学不好，密码还是太难了，一个字都看不懂哈哈哈哈哈哈哈</s></p>\n<p>先用一个入门的 pip 包吧</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> pycryptodome</pre></td></tr></table></figure><p>开始，根据一道 CTF 题慢慢来</p>\n<h2 id=\"先改一下flag以调通newcomerpy代码\"><a class=\"anchor\" href=\"#先改一下flag以调通newcomerpy代码\">#</a> 先改一下 flag 以调通 newcomer.py 代码</h2>\n<blockquote>\n<p>题目：初识 RSA<br />\n 来源：XSCTF 新人选拔赛<br />\n描述：p 和 q 藏起来了，你能帮我找到它们吗？</p>\n</blockquote>\n<p>我找个 damn</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> bytes_to_long<span class=\"token punctuation\">,</span>inverse<span class=\"token punctuation\">,</span>getPrime</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>q <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>n <span class=\"token operator\">=</span> p<span class=\"token operator\">*</span>q</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pq <span class=\"token operator\">=</span> p<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>qp <span class=\"token operator\">=</span> q<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c=\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pq=\"</span><span class=\"token punctuation\">,</span>pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qp=\"</span><span class=\"token punctuation\">,</span>qp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>c= 8722269075970644434253339592758512788160408912707387632591552130175707843950684315083250494010055435391879036285103810263591951437829414438640307561645721347859659807138051841516634704123100270651976676182059252251162982609391666023674158274992400910869692389001622774140191223807887675081808561012755545464977015973615407965906513878979919700065923364884766974187303774330319143647840846354404070430118235352622445115153298578370521811697710289716188726587743282814946239856766713516166990341116198180068191759095913957606379780234116317390622824096667107736103270907349927467971817639795094030622157581511033950777</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>n= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074584935050067254029262890188260006596141011807724688556673520261743199388391094490191001701011230322653422314758778116196105077883955436582364267530633358016652912054880813710531145973799193443828969535902856467548523653920307742364119002349899553478815101092655897400295925170383678499125295006364960124859003</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>pq= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074488896197029704465200125337817646702009123916866455067019234171839614862660036737875747177391796376553159880972782837853473250804807544086701088829096838316550146794766718580877976153967582795248676367265069623900208276878140709691073369415161936376086988069213820933152601453587292943483693378833664901178324</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>qp= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074475956379708898904933143429835002718457573266164923043251954374464149976302585916538814746811455883837138715445492053610047383292461097590195481556557381952895539341802954749542143253491617052100969586396996063822508764438280468492894012685918249843558593322831683872737943676955669923498182824352081785243246</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>'''</span></pre></td></tr></table></figure><p>原题是引入的 flag 文件，把那行注释掉，下面加一行自己写的 flag 就行，记得用 b 包裹</p>\n<h2 id=\"用自己的语言写出rsa公钥和私钥的计算公式使用pqphined为符号\"><a class=\"anchor\" href=\"#用自己的语言写出rsa公钥和私钥的计算公式使用pqphined为符号\">#</a> 用自己的语言写出 RSA 公钥和私钥的计算公式（使用 p，q，phi，n，e，d 为符号）</h2>\n<p>设 p，q 为大质数，n=pq</p>\n<p>phi=(p-1)(q-1)</p>\n<blockquote>\n<p>根据欧拉函数，phi=(p-1)(q-1)，此部分的证明可以搜一下或者问问强大的大语言模型</p>\n</blockquote>\n<p>e=65537 (公钥指数，任意小于 phi 并与其互质的即可)</p>\n<p>d=inverse (e,phi)(私钥指数)</p>\n<blockquote>\n<p>inverse 在库里带了，求逆元的意思</p>\n</blockquote>\n<p>公钥对即为 e，n；私钥对即为 d，n</p>\n<h2 id=\"利用题目下方注释中的已知变量计算phi并利用inverse函数编程计算e在模phi意义下的乘法逆元记为d根据程序运行结果写出d的具体数值\"><a class=\"anchor\" href=\"#利用题目下方注释中的已知变量计算phi并利用inverse函数编程计算e在模phi意义下的乘法逆元记为d根据程序运行结果写出d的具体数值\">#</a> 利用题目下方注释中的已知变量计算 phi，并利用 inverse 函数编程计算 e 在模 phi 意义下的乘法逆元，记为 d，根据程序运行结果写出 d 的具体数值；</h2>\n<p>别想太多，n=p*q，那么极其显然</p>\n<p>phi 就是 pq<em>qp/n（别把这里面的 pq 理解成 p</em> * q，看上面的 python 代码哦同学）</p>\n<p>（请忽略我的背景柚子厨怎么你了 wwwwwww）</p>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241222195849333.png\" alt=\"image-20241222195849333\" /></p>\n<p>sagemath 命令行还有一些常用的东西，可以看我其他的文章（挖坑）</p>\n<p><img loading=\"lazy\" data-src=\"https://blog-store-1325083740.cos.ap-beijing.myqcloud.com/image-20241222202021405.png\" alt=\"image-20241222202021405\" /></p>\n<p>你算对了吗？</p>\n<blockquote>\n<p>phi=(pq*qp) //n，这句话如果用单 / 会报 OverflowError: integer division result too large for a float。是除法运算导致的类型溢出，用双 // 即可。</p>\n<p>单 / 就是执行<strong>浮点数除法</strong>，即普通的除法操作，双 // 就是执行<strong>整数除法</strong>，即地板除法</p>\n</blockquote>\n<h2 id=\"根据下列给出的p-q-e根据rsa算法编程计算公钥n与私钥d\"><a class=\"anchor\" href=\"#根据下列给出的p-q-e根据rsa算法编程计算公钥n与私钥d\">#</a> 根据下列给出的 p、q、e，根据 RSA 算法编程计算公钥 n 与私钥 d；</h2>\n<blockquote>\n<p>p=173747400775037237499119138628710917207976935718394035613063219109153197713240288497094852951328821120301146137416392125632164384666157952079993477037237778043103278877799120982366215399159107746276881271883220494577745511406216675640773966244559596835970378099355485746784486359013819361014997811485589135463</p>\n<p>q=131816585373639721213952582957741137275970828607414189698553233434142961482639192734668517311468596205692079539001403643395543816907261944034422413069781755026864643651448329100659792941632674865761952547883089120086825249692433942528976412805682521697534499714513072333159601382118300897685368738513700813533</p>\n<p>e=65537</p>\n</blockquote>\n<p>没什么好说的，建议同学们先自己做一下在对答案，错了回去看看上面的</p>\n<blockquote>\n<p>n=22902789087710692282201627723972920087676945775651369909558749681603601877066490004280829887082860024866325792922333359888979450409785852136285331867214311784932513053946349686873084098919921626735642656688483918867105990444133292660146552582773030563402978424369091489168537829677450378086515187008083500599611600232061376101775199885242634728744796816625633726726074004731386467983188726961022911791843528459801349329514692878947844318287016330210241002676592845651108656701768277324789376390295075009358573926461653230171198186299924562887630088294834319717425915382663997302617669638278141644149065887129240620779</p>\n<p>d=19271863372140646463624718313226644858249851666842334809381515307252297674818586817615620577428910108660806391844117335212132837202625393102518076757881313639679468046843452495262065227324059965356828746942945552493466195508226172853946655099900580076597708945613657755972616318922476707819049590581423940789934387916037469210407055279325381173039093072419831193470910945428027164177392052950722125466565541460489747701257832749756103367996775905993293368370146016279539314698750416709668194421867922941773222876602958853233196249715041186342934713607756322667953880385223035641130659335671630397231173571336884350777</p>\n</blockquote>\n<h2 id=\"利用上述公钥n-e对你名字全拼如liuyangfan进行加密\"><a class=\"anchor\" href=\"#利用上述公钥n-e对你名字全拼如liuyangfan进行加密\">#</a> 利用上述公钥 n、e 对你名字全拼（如：liuyangfan）进行加密</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> bytes_to_long<span class=\"token punctuation\">,</span>inverse<span class=\"token punctuation\">,</span>getPrime<span class=\"token punctuation\">,</span>long_to_bytes</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># #from flag import flag</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token string\">b'flag coming~'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token operator\">=</span><span class=\"token number\">173747400775037237499119138628710917207976935718394035613063219109153197713240288497094852951328821120301146137416392125632164384666157952079993477037237778043103278877799120982366215399159107746276881271883220494577745511406216675640773966244559596835970378099355485746784486359013819361014997811485589135463</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>q<span class=\"token operator\">=</span><span class=\"token number\">131816585373639721213952582957741137275970828607414189698553233434142961482639192734668517311468596205692079539001403643395543816907261944034422413069781755026864643651448329100659792941632674865761952547883089120086825249692433942528976412805682521697534499714513072333159601382118300897685368738513700813533</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>e<span class=\"token operator\">=</span><span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>n<span class=\"token operator\">=</span><span class=\"token number\">22902789087710692282201627723972920087676945775651369909558749681603601877066490004280829887082860024866325792922333359888979450409785852136285331867214311784932513053946349686873084098919921626735642656688483918867105990444133292660146552582773030563402978424369091489168537829677450378086515187008083500599611600232061376101775199885242634728744796816625633726726074004731386467983188726961022911791843528459801349329514692878947844318287016330210241002676592845651108656701768277324789376390295075009358573926461653230171198186299924562887630088294834319717425915382663997302617669638278141644149065887129240620779</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>d<span class=\"token operator\">=</span><span class=\"token number\">19271863372140646463624718313226644858249851666842334809381515307252297674818586817615620577428910108660806391844117335212132837202625393102518076757881313639679468046843452495262065227324059965356828746942945552493466195508226172853946655099900580076597708945613657755972616318922476707819049590581423940789934387916037469210407055279325381173039093072419831193470910945428027164177392052950722125466565541460489747701257832749756103367996775905993293368370146016279539314698750416709668194421867922941773222876602958853233196249715041186342934713607756322667953880385223035641130659335671630397231173571336884350777</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c=\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>豪丸，哈哈</p>\n<h2 id=\"利用上述私钥d将下列密文c解密为明文用long_to_bytes转为字节码打印\"><a class=\"anchor\" href=\"#利用上述私钥d将下列密文c解密为明文用long_to_bytes转为字节码打印\">#</a> 利用上述私钥 d，将下列密文 c 解密为明文（用 long_to_bytes 转为字节码打印）</h2>\n<blockquote>\n<p>c=22383445933736798279478032679517743837766449187698865398822423786317612396771654040156586654564003392384975014045643201026069165276350584034120841617657486555798948939049343900381125798000000172357016404870066390095970211708364996514629691512019106870733929516372325207940525326467947232996619729431748024769431567208774806188872803942768881324395058229038610826245541466028073553184615680354118655959979504640632739098044460639023736294401801478667944983999124796530293982085703611284581213900570723479615642643430713949661089128106079384524944632103663244376051089098793845750645708721359256022997797080498949228931</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> bytes_to_long<span class=\"token punctuation\">,</span>inverse<span class=\"token punctuation\">,</span>getPrime<span class=\"token punctuation\">,</span>long_to_bytes</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># #from flag import flag</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span><span class=\"token number\">173747400775037237499119138628710917207976935718394035613063219109153197713240288497094852951328821120301146137416392125632164384666157952079993477037237778043103278877799120982366215399159107746276881271883220494577745511406216675640773966244559596835970378099355485746784486359013819361014997811485589135463</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token operator\">=</span><span class=\"token number\">131816585373639721213952582957741137275970828607414189698553233434142961482639192734668517311468596205692079539001403643395543816907261944034422413069781755026864643651448329100659792941632674865761952547883089120086825249692433942528976412805682521697534499714513072333159601382118300897685368738513700813533</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span><span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>n<span class=\"token operator\">=</span><span class=\"token number\">22902789087710692282201627723972920087676945775651369909558749681603601877066490004280829887082860024866325792922333359888979450409785852136285331867214311784932513053946349686873084098919921626735642656688483918867105990444133292660146552582773030563402978424369091489168537829677450378086515187008083500599611600232061376101775199885242634728744796816625633726726074004731386467983188726961022911791843528459801349329514692878947844318287016330210241002676592845651108656701768277324789376390295075009358573926461653230171198186299924562887630088294834319717425915382663997302617669638278141644149065887129240620779</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>d<span class=\"token operator\">=</span><span class=\"token number\">19271863372140646463624718313226644858249851666842334809381515307252297674818586817615620577428910108660806391844117335212132837202625393102518076757881313639679468046843452495262065227324059965356828746942945552493466195508226172853946655099900580076597708945613657755972616318922476707819049590581423940789934387916037469210407055279325381173039093072419831193470910945428027164177392052950722125466565541460489747701257832749756103367996775905993293368370146016279539314698750416709668194421867922941773222876602958853233196249715041186342934713607756322667953880385223035641130659335671630397231173571336884350777</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">22383445933736798279478032679517743837766449187698865398822423786317612396771654040156586654564003392384975014045643201026069165276350584034120841617657486555798948939049343900381125798000000172357016404870066390095970211708364996514629691512019106870733929516372325207940525326467947232996619729431748024769431567208774806188872803942768881324395058229038610826245541466028073553184615680354118655959979504640632739098044460639023736294401801478667944983999124796530293982085703611284581213900570723479615642643430713949661089128106079384524944632103663244376051089098793845750645708721359256022997797080498949228931</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pq <span class=\"token operator\">=</span> p<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>qp <span class=\"token operator\">=</span> q<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>phi<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">*</span>qp<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>n</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>d<span class=\"token operator\">=</span>inverse<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>phi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>c<span class=\"token operator\">=</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>long_to_bytes<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当然，flag 没变哦，答案还是 “flag coming~”</p>\n<p>豪丸，当然，碰到几个难题就老实了</p>\n",
            "tags": [
                "CTF",
                "密码学",
                "CTF",
                "密码"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/12/20/CTF/binary/PWN/pwndbg%E7%94%A8%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "url": "https://0d0-1yp0.github.io/2024/12/20/CTF/binary/PWN/pwndbg%E7%94%A8%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "title": "pwndbg操作方式个人总结（一）",
            "date_published": "2024-12-19T16:00:00.000Z",
            "content_html": "<h1 id=\"将-pwndbg-输出重定向到另一个终端tty\"><a class=\"anchor\" href=\"#将-pwndbg-输出重定向到另一个终端tty\">#</a> 将 pwndbg 输出重定向到另一个终端（TTY）：</h1>\n<ol>\n<li>\n<p><strong>打开另一个终端</strong></p>\n<ul>\n<li>\n<p>启动一个新的终端窗口或在当前终端中使用  <code>tmux</code> 、 <code>screen</code>  等工具分割出新的窗口。</p>\n</li>\n<li>\n<p>使用  <code>tty</code>  命令获取该终端的设备文件路径。例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">tty</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/dev/pts/1</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong>在 pwndbg 中设置输出重定向</strong></p>\n<ul>\n<li>\n<p>在 GDB（pwndbg）中输入以下命令，将上下文输出重定向到新的终端：</p>\n<pre><code class=\"language-gdb\">set context-output /dev/pts/1\n</code></pre>\n</li>\n<li>\n<p>现在，pwndbg 的上下文信息（如  <code>context</code>  命令的输出）将显示在  <code>/dev/pts/1</code>  对应的终端中。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>恢复默认设置（可选）</strong></p>\n<ul>\n<li>\n<p>想将输出恢复到默认终端，可以使用：</p>\n<pre><code class=\"language-gdb\">set context-output /dev/tty\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"pwndbg的基础操作\"><a class=\"anchor\" href=\"#pwndbg的基础操作\">#</a> pwndbg 的基础操作:</h1>\n<p>附上一个佬的原文链接，写的真的很厉害 ovo 就不重复赘述了</p>\n<blockquote>\n<p>原文链接：<a href=\"https://blog.csdn.net/XiDPPython/article/details/142690569\">https://blog.csdn.net/XiDPPython/article/details/142690569</a></p>\n</blockquote>\n<h1 id=\"pwndbg-额外操作\"><a class=\"anchor\" href=\"#pwndbg-额外操作\">#</a> <strong>Pwndbg</strong> 额外操作</h1>\n<p>特别适用于逆向工程和漏洞利用。以下是一些常用的 pwndbg 命令及其用途：</p>\n<h3 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令：</h3>\n<ol>\n<li>\n<p><strong> <code>context</code> （或  <code>ctx</code> ）</strong></p>\n<p>显示当前调试的上下文信息，包括寄存器、堆栈、代码和内存映射等。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>context</code> ：显示默认的上下文信息。</li>\n<li><code>context code</code> ：仅显示代码段的反汇编。</li>\n<li><code>context regs</code> ：仅显示寄存器信息。</li>\n<li><code>context stack</code> ：仅显示堆栈内容。</li>\n<li><code>context all</code> ：显示所有可用的上下文信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>hexdump</code> </strong></p>\n<p>以十六进制形式显示内存内容。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>hexdump ADDRESS</code> ：从指定地址开始显示内存内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>telescope</code> </strong></p>\n<p>类似于  <code>hexdump</code> ，但提供更友好的内存查看方式，自动解析指针和字符串。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>telescope ADDRESS</code> ：从指定地址开始显示内存内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>vmmap</code> </strong></p>\n<p>显示当前进程的内存映射信息。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>vmmap</code> ：列出所有内存段及其权限。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>search</code> </strong></p>\n<p>在内存中搜索特定的字节序列或模式。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>search PATTERN</code> ：搜索指定的模式。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>pie</code> </strong></p>\n<p>处理位置无关可执行文件（PIE）的相关命令。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>pie breakpoint OFFSET</code> ：在偏移地址处设置断点。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>rop</code> </strong></p>\n<p>帮助查找 ROP（Return-Oriented Programming）小工具。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>rop</code> ：列出可用的 ROP 小工具。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>got</code>  和  <code>plt</code> </strong></p>\n<p>查看全局偏移量表（GOT）和过程链接表（PLT）。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>got</code> ：显示 GOT 表信息。</li>\n<li><code>plt</code> ：显示 PLT 表信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>aslr</code> </strong></p>\n<p>控制地址空间布局随机化（ASLR）。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>aslr on</code> ：启用 ASLR。</li>\n<li><code>aslr off</code> ：禁用 ASLR。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>elf-info</code> </strong></p>\n<p>显示当前可执行文件的 ELF 格式信息。</p>\n<ul>\n<li><strong>用法：</strong>\n<ul>\n<li><code>elf-info</code> ：显示 ELF 文件的段和节信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"pwndbg积累操作本人个人经常会用到的一些操作\"><a class=\"anchor\" href=\"#pwndbg积累操作本人个人经常会用到的一些操作\">#</a> pwndbg 积累操作 (本人个人经常会用到的一些操作)</h1>\n<h3 id=\"gdb-info-functions-win\"><a class=\"anchor\" href=\"#gdb-info-functions-win\">#</a> <strong>(<strong>gdb</strong>)</strong> <strong>info</strong> <strong>functions</strong> <strong>win</strong></h3>\n<p><strong>All</strong> <strong>functions</strong> <strong>matching</strong> <strong>regular</strong> <strong>expression</strong> <strong>&quot;win&quot;</strong>:  <strong>Non</strong>-<strong>debugging</strong> <strong>symbols:</strong></p>\n<p><strong>0</strong>x080484cb  <strong>win</strong></p>\n<p>还会更新</p>\n",
            "tags": [
                "CTF",
                "二进制安全",
                "二进制漏洞PWN",
                "工具使用",
                "二进制",
                "CTF",
                "pwn"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/12/18/CTF/binary/RE/2020%E7%BD%91%E9%BC%8ERE/",
            "url": "https://0d0-1yp0.github.io/2024/12/18/CTF/binary/RE/2020%E7%BD%91%E9%BC%8ERE/",
            "title": "2020网鼎RE",
            "date_published": "2024-12-17T16:00:00.000Z",
            "content_html": "<h1 id=\"还木写完先开个坑\"><a class=\"anchor\" href=\"#还木写完先开个坑\">#</a> 还木写完 ^^ 先开个坑</h1>\n<h3 id=\"代码分析\"><a class=\"anchor\" href=\"#代码分析\">#</a> <strong>代码分析：</strong></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">[</span><span class=\"token number\">117</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+18h] [ebp-1D4h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">__main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>unk_403040<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1C8u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">vm_operad</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good,The answer format is:flag &#123;&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"逐行解释\"><a class=\"anchor\" href=\"#逐行解释\">#</a> <strong>逐行解释：</strong></h4>\n<ol>\n<li>\n<p><strong>函数签名：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>标准的  <code>main</code>  函数入口。</li>\n<li><code>__cdecl</code>  是调用约定，表示参数从右到左入栈，由调用者清理栈。</li>\n</ul>\n</li>\n<li>\n<p><strong>变量声明：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">[</span><span class=\"token number\">117</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+18h] [ebp-1D4h] BYREF</span></pre></td></tr></table></figure><ul>\n<li>声明了一个包含 117 个整数的数组  <code>v4</code> 。</li>\n<li>注释指出了栈偏移量，表示  <code>v4</code>  位于栈帧的  <code>[ebp - 0x1D4]</code>  位置。</li>\n<li><code>BYREF</code>  表示该变量以引用方式传递给函数。</li>\n</ul>\n</li>\n<li>\n<p><strong>调用  <code>__main()</code> ：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>这是编译器（如 GCC）在初始化时调用的函数，用于设置全局构造函数等。</li>\n<li>在逆向工程中，它通常可以忽略，对主要逻辑影响不大。</li>\n</ul>\n</li>\n<li>\n<p><strong>调用  <code>qmemcpy()</code> ：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>unk_403040<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1C8u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将内存从  <code>&amp;unk_403040</code>  复制到  <code>v4</code> ，长度为  <code>0x1C8</code>  字节（456 字节）。</li>\n<li><code>qmemcpy</code>  类似于标准的  <code>memcpy</code> ，但可能是 IDA Pro 的内部函数。</li>\n</ul>\n</li>\n<li>\n<p><strong>调用  <code>vm_operad()</code> ：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vm_operad</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>调用函数  <code>vm_operad</code> ，传入参数  <code>v4</code>  和  <code>114</code> 。</li>\n<li>这里的  <code>114</code>  可能表示操作码的数量、数据长度或某个关键值。</li>\n</ul>\n</li>\n<li>\n<p><strong>输出信息：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good,The answer format is:flag &#123;&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>输出提示信息，告诉我们答案的格式是  <code>flag &#123;&#125;</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>返回语句：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>标准的  <code>main</code>  函数返回，表示程序正常结束。</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h3 id=\"深入分析\"><a class=\"anchor\" href=\"#深入分析\">#</a> <strong>深入分析：</strong></h3>\n<h4 id=\"1-理解数据复制操作\"><a class=\"anchor\" href=\"#1-理解数据复制操作\">#</a> <strong>1. 理解数据复制操作：</strong></h4>\n<ul>\n<li>\n<p><strong>数据源  <code>unk_403040</code> ：</strong></p>\n<ul>\n<li><code>unk_403040</code>  是未知的全局数据，位于地址  <code>0x403040</code> 。</li>\n<li>我们需要查看该地址处的数据内容，可能是加密的数据、字节码、操作码等。</li>\n</ul>\n</li>\n<li>\n<p><strong>复制操作：</strong></p>\n<ul>\n<li>将  <code>456</code>  字节的数据复制到  <code>v4</code> 。</li>\n<li><code>v4</code>  的大小为  <code>117 * 4 = 468</code>  字节（因为每个  <code>int</code>  是 4 字节），所以复制操作是安全的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-分析-vm_operad-函数\"><a class=\"anchor\" href=\"#2-分析-vm_operad-函数\">#</a> <strong>2. 分析  <code>vm_operad()</code>  函数：</strong></h4>\n<ul>\n<li>\n<p><strong>函数作用猜测：</strong></p>\n<ul>\n<li>从函数名来看， <code>vm_operad</code>  可能表示 “虚拟机操作”。</li>\n<li>这暗示该函数可能是一个虚拟机解释器，执行传入的字节码或操作码。</li>\n</ul>\n</li>\n<li>\n<p><strong>参数  <code>114</code>  的含义：</strong></p>\n<ul>\n<li><code>114</code>  可能表示操作码的数量或某个关键参数。</li>\n<li>可能与复制的数据长度或某种校验有关。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-反汇编-vm_operad\"><a class=\"anchor\" href=\"#3-反汇编-vm_operad\">#</a> <strong>3. 反汇编  <code>vm_operad()</code> ：</strong></h4>\n<ul>\n<li>\n<p><strong>步骤：</strong></p>\n<ul>\n<li>在 IDA 中，定位并反汇编  <code>vm_operad</code> 。</li>\n<li>分析函数的控制流程，查看是否有循环、跳转表或条件判断。</li>\n</ul>\n</li>\n<li>\n<p><strong>寻找模式：</strong></p>\n<ul>\n<li><strong>操作码解析：</strong> 检查是否有读取  <code>v4</code>  中数据作为操作码的逻辑。</li>\n<li><strong>栈操作：</strong> 查看是否有自定义的栈，用于模拟指令执行。</li>\n<li><strong>关键函数调用：</strong> 寻找与字符串比较、加密解密、输出相关的函数调用。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-堆栈不平衡问题的原因\"><a class=\"anchor\" href=\"#4-堆栈不平衡问题的原因\">#</a> <strong>4. 堆栈不平衡问题的原因：</strong></h4>\n<ul>\n<li>\n<p><strong>异常的栈操作：</strong></p>\n<ul>\n<li>如果  <code>vm_operad</code>  在执行过程中直接修改了栈指针（如  <code>ESP</code>  寄存器），会导致 IDA 无法正确跟踪栈帧，出现堆栈不平衡的提示。</li>\n</ul>\n</li>\n<li>\n<p><strong>解决方法：</strong></p>\n<ul>\n<li><strong>手动调整：</strong> 在 IDA 中，可以手动修改栈平衡，在函数属性中调整栈偏移。</li>\n<li><strong>分析调用约定：</strong> 确保函数的入口和出口栈平衡，即进入和离开函数时，栈指针应恢复到相同的值。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-修改-call-指令的值为-0-的意义\"><a class=\"anchor\" href=\"#5-修改-call-指令的值为-0-的意义\">#</a> <strong>5. 修改  <code>call</code>  指令的值为  <code>0</code>  的意义：</strong></h4>\n<ul>\n<li>\n<p><strong>跳过函数调用：</strong></p>\n<ul>\n<li>将  <code>call</code>  指令的目标地址修改为  <code>0</code> ，相当于调用了一个空函数，可能会导致程序崩溃或无操作返回。</li>\n<li>在逆向过程中，这种修改用于跳过某些干扰性的函数，如反调试、反虚拟化或延时函数。</li>\n</ul>\n</li>\n<li>\n<p><strong>保持栈平衡：</strong></p>\n<ul>\n<li>即使修改了  <code>call</code> ，也需要确保栈的平衡。</li>\n<li>可以用  <code>NOP</code>  指令替换  <code>call</code> ，或者调整栈指针，使得程序继续正常执行。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"可视化结构图\"><a class=\"anchor\" href=\"#可视化结构图\">#</a> <strong>可视化结构图：</strong></h3>\n<h4 id=\"函数调用栈\"><a class=\"anchor\" href=\"#函数调用栈\">#</a> <strong>函数调用栈：</strong></h4>\n<pre><code>[ 高地址 ]\n+-----------------------+\n| 命令行参数 envp       |\n+-----------------------+\n| 命令行参数 argv       |\n+-----------------------+\n| 参数个数 argc         |\n+-----------------------+\n| 返回地址              | &lt;-- 调用 __main() 压入的返回地址\n+-----------------------+\n| 返回地址              | &lt;-- 调用 main() 压入的返回地址\n+-----------------------+\n| 旧的 EBP              | &lt;-- 基指针 EBP\n+-----------------------+\n| 局部变量 v4[117]      | &lt;-- 栈帧中的变量\n+-----------------------+\n[ 低地址 ]\n</code></pre>\n<h4 id=\"程序执行流程\"><a class=\"anchor\" href=\"#程序执行流程\">#</a> <strong>程序执行流程：</strong></h4>\n<ol>\n<li><strong>开始执行  <code>main()</code> </strong>。</li>\n<li><strong>调用  <code>__main()</code> </strong>：初始化操作。</li>\n<li><strong>数据复制</strong>：将数据从  <code>unk_403040</code>  复制到  <code>v4</code> 。</li>\n<li><strong>执行  <code>vm_operad(v4, 114)</code> </strong>：\n<ul>\n<li>可能解释执行  <code>v4</code>  中的数据。</li>\n<li>关键的逻辑可能在此函数中。</li>\n</ul>\n</li>\n<li><strong>输出提示信息</strong>：告诉我们答案的格式。</li>\n<li><strong>程序结束</strong>：返回  <code>0</code> 。</li>\n</ol>\n<hr />\n<h3 id=\"成为逆向大师的指导\"><a class=\"anchor\" href=\"#成为逆向大师的指导\">#</a> <strong>成为逆向大师的指导：</strong></h3>\n<h4 id=\"1-深入分析-unk_403040\"><a class=\"anchor\" href=\"#1-深入分析-unk_403040\">#</a> <strong>1. 深入分析  <code>unk_403040</code> ：</strong></h4>\n<ul>\n<li>\n<p><strong>查看数据内容：</strong></p>\n<ul>\n<li>在 IDA 中，跳转到地址  <code>0x403040</code> ，查看数据是否为可读字符串、操作码或其他格式。</li>\n<li>如果是字节码，尝试手动解析。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据模式识别：</strong></p>\n<ul>\n<li>检查是否有明显的加密或混淆迹象。</li>\n<li>如果数据不可读，可能需要解密或解码。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-解析-vm_operad-的逻辑\"><a class=\"anchor\" href=\"#2-解析-vm_operad-的逻辑\">#</a> <strong>2. 解析  <code>vm_operad()</code>  的逻辑：</strong></h4>\n<ul>\n<li>\n<p><strong>反汇编并注释：</strong></p>\n<ul>\n<li>逐行反汇编  <code>vm_operad</code> ，添加注释，理解每个指令的作用。</li>\n<li>关注寄存器的使用、条件跳转和函数调用。</li>\n</ul>\n</li>\n<li>\n<p><strong>构建操作码表：</strong></p>\n<ul>\n<li>如果  <code>vm_operad</code>  是解释器，可能有一个操作码对应的指令集。</li>\n<li>建立操作码与指令的映射，模拟执行过程。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-解决堆栈不平衡\"><a class=\"anchor\" href=\"#3-解决堆栈不平衡\">#</a> <strong>3. 解决堆栈不平衡：</strong></h4>\n<ul>\n<li>\n<p><strong>理解栈帧结构：</strong></p>\n<ul>\n<li>熟悉函数调用约定，如  <code>cdecl</code> 、 <code>stdcall</code>  等。</li>\n<li>理解栈指针（ESP）和基指针（EBP）的变化。</li>\n</ul>\n</li>\n<li>\n<p><strong>修正 IDA 中的堆栈信息：</strong></p>\n<ul>\n<li>使用 IDA 的功能，手动设置函数的栈调整值。</li>\n<li>在函数属性中，设置正确的输入输出栈大小。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-实践调试技巧\"><a class=\"anchor\" href=\"#4-实践调试技巧\">#</a> <strong>4. 实践调试技巧：</strong></h4>\n<ul>\n<li>\n<p><strong>使用调试器：</strong></p>\n<ul>\n<li>在动态调试器（如 OllyDbg、x64dbg）中运行程序，观察运行时的行为。</li>\n<li>设置断点，查看寄存器和内存的变化。</li>\n</ul>\n</li>\n<li>\n<p><strong>脚本和自动化：</strong></p>\n<ul>\n<li>利用 IDA Python 编写脚本，自动提取和分析数据。</li>\n<li>学习使用其他逆向工具，如 Ghidra、Radare2。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-解决逆向挑战\"><a class=\"anchor\" href=\"#5-解决逆向挑战\">#</a> <strong>5. 解决逆向挑战：</strong></h4>\n<ul>\n<li>\n<p><strong>寻找密钥或 Flag：</strong></p>\n<ul>\n<li>关注  <code>vm_operad</code>  中的比较、循环和条件跳转。</li>\n<li>可能需要输入特定的数据，或者从  <code>v4</code>  中提取信息。</li>\n</ul>\n</li>\n<li>\n<p><strong>学习常见的加密和编码方式：</strong></p>\n<ul>\n<li>熟悉 Base64、异或加密、移位加密等常用技巧。</li>\n<li>了解字符串加密和解密的过程。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> <strong>总结：</strong></h3>\n<p>通过逐步分析代码，我们了解到：</p>\n<ul>\n<li>程序从全局未知数据  <code>unk_403040</code>  中复制了一段数据到本地变量  <code>v4</code> 。</li>\n<li>通过调用  <code>vm_operad</code> ，可能对这段数据进行了解析或执行。</li>\n<li>输出的信息提示我们，答案的格式是  <code>flag &#123;&#125;</code> 。</li>\n</ul>\n<p>要进一步解开这个逆向题，需要：</p>\n<ul>\n<li>深入分析  <code>vm_operad</code>  的逻辑，理解其功能。</li>\n<li>可能需要模拟或重现  <code>vm_operad</code>  的执行过程。</li>\n<li>从  <code>v4</code>  或其他数据中提取出隐藏的  <code>flag</code> 。</li>\n</ul>\n<hr />\n<p><strong>建议：</strong></p>\n<ul>\n<li><strong>耐心研究</strong>：逆向工程需要耐心和细致的分析，逐行理解代码。</li>\n<li><strong>多练习</strong>：通过解决更多的逆向题目，积累经验。</li>\n<li><strong>学习基础</strong>：巩固计算机体系结构、汇编语言和操作系统的知识。</li>\n<li><strong>交流讨论</strong>：与他人分享和讨论你的发现，可以获得新的思路。</li>\n</ul>\n<p>希望以上分析对你有所帮助，继续努力，你一定能成为一名出色的逆向工程师！\\</p>\n<p>好的，让我们进一步分析  <code>vm_operad</code>  函数的具体实现，逐步理解它的逻辑和可能的用途。</p>\n<h3 id=\"代码分析-2\"><a class=\"anchor\" href=\"#代码分析-2\">#</a> <strong>代码分析：</strong></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">vm_operad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> Str<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+13h] [ebp-E5h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DBh] [ebp-1Dh]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DCh] [ebp-1Ch]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-18h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E4h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E8h] [ebp-10h]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+ECh] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  v9 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  v6 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    result <span class=\"token operator\">=</span> v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v9 <span class=\"token operator\">>=</span> a2 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> a1<span class=\"token punctuation\">[</span>v9<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Str<span class=\"token punctuation\">[</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">++</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">++</span>v6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">++</span>v8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        v4 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        v9 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        v4 <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        v9 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        v4 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        v9 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        v4 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        v9 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token operator\">++</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Str<span class=\"token punctuation\">[</span>v7 <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"what a shame...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token operator\">++</span>v7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        v9 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        Str<span class=\"token punctuation\">[</span>v5<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token operator\">++</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token operator\">++</span>v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token operator\">++</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        v4 <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token operator\">++</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        v4 <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token operator\">++</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"逐行解释-2\"><a class=\"anchor\" href=\"#逐行解释-2\">#</a> <strong>逐行解释：</strong></h3>\n<ol>\n<li>\n<p><strong>变量声明：</strong></p>\n<ul>\n<li><code>int result;</code> ：用于存储函数返回值。</li>\n<li><code>char Str[200];</code> ：字符数组，用于存储字符串或数据。</li>\n<li><code>char v4;</code> ：临时变量，用于存储中间计算的结果。</li>\n<li><code>int v5, v6, v7, v8, v9;</code> ：多个整数变量，用于索引和计数。</li>\n</ul>\n</li>\n<li>\n<p><strong>初始化：</strong></p>\n<ul>\n<li><code>v9</code>  初始化为  <code>0</code> ，作为主循环的索引。</li>\n<li><code>v5</code> ,  <code>v6</code> ,  <code>v7</code> ,  <code>v8</code>  也初始化为  <code>0</code> ，它们分别用于处理字符串和跟踪状态。</li>\n</ul>\n</li>\n<li>\n<p><strong>主循环：</strong></p>\n<ul>\n<li><code>while (1)</code> ：无限循环，直到  <code>return</code>  语句。</li>\n<li><code>result = v9;</code> ：在每次循环开始时更新  <code>result</code>  为当前索引。</li>\n<li><code>if (v9 &gt;= a2) return result;</code> ：如果索引  <code>v9</code>  超过输入参数  <code>a2</code> ，则返回当前结果，结束循环。</li>\n</ul>\n</li>\n<li>\n<p><strong>switch 语句：</strong></p>\n<ul>\n<li>根据  <code>a1[v9]</code>  的值进行不同操作， <code>a1</code>  是输入的整数数组。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"每种情况的分析\"><a class=\"anchor\" href=\"#每种情况的分析\">#</a> <strong>每种情况的分析：</strong></h4>\n<ul>\n<li>\n<p><strong>case 1:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Str<span class=\"token punctuation\">[</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将  <code>v4</code>  存入  <code>Str</code>  数组的偏移量  <code>v6 + 100</code> ，并更新  <code>v6</code>  和  <code>v8</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 2:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将  <code>a1</code>  中下一个元素与  <code>Str[v8]</code>  相加，结果存入  <code>v4</code> ，并将  <code>v9</code>  增加  <code>2</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 3:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4 <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将  <code>Str[v8]</code>  减去  <code>a1[v9 + 1]</code>  的低字节（使用  <code>LOBYTE</code> ），结果存入  <code>v4</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 4:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>使用按位异或操作将  <code>a1[v9 + 1]</code>  与  <code>Str[v8]</code>  进行运算。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 5:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将  <code>a1[v9 + 1]</code>  与  <code>Str[v8]</code>  相乘，结果存入  <code>v4</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 6:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">++</span>v9<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>仅增加  <code>v9</code> ，不进行任何其他操作。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 7:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">[</span>v7 <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a1<span class=\"token punctuation\">[</span>v9 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"what a shame...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>检查  <code>Str[v7 + 100]</code>  是否等于  <code>a1[v9 + 1]</code> ，如果不等，则打印错误信息并退出程序。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 8:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Str<span class=\"token punctuation\">[</span>v5<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将  <code>v4</code>  存入  <code>Str</code>  数组的偏移量  <code>v5</code> ，并更新  <code>v5</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 10:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>从输入读取数据到  <code>Str</code>  中。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 11:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4 <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将  <code>Str[v8]</code>  减去  <code>1</code> ，结果存入  <code>v4</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>case 12:</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4 <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>v8<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将  <code>Str[v8]</code>  加上  <code>1</code> ，结果存入  <code>v4</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>default:</strong></p>\n<ul>\n<li>不执行任何操作，继续循环。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"潜在用途分析\"><a class=\"anchor\" href=\"#潜在用途分析\">#</a> <strong>潜在用途分析：</strong></h3>\n<h4 id=\"1-逻辑概述\"><a class=\"anchor\" href=\"#1-逻辑概述\">#</a> <strong>1. 逻辑概述：</strong></h4>\n<ul>\n<li><code>vm_operad</code>  函数似乎是一个简单的虚拟机或解释器，它根据传入的指令数组  <code>a1</code>  逐步操作数组  <code>Str</code>  和变量  <code>v4</code> 。</li>\n<li>这个函数可以执行多种操作，如加法、减法、乘法、异或等，处理相应的数据并将结果存储在  <code>Str</code>  中。</li>\n</ul>\n<h4 id=\"2-关键指令\"><a class=\"anchor\" href=\"#2-关键指令\">#</a> <strong>2. 关键指令：</strong></h4>\n<ul>\n<li><strong>读入数据</strong>：通过  <code>read(Str)</code>  可能是让用户输入数据以进一步处理。</li>\n<li><strong>条件检查</strong>：在  <code>case 7</code>  中，如果输入不匹配，会导致程序退出，表明某些输入的有效性检查。</li>\n</ul>\n<h4 id=\"3-输出逻辑\"><a class=\"anchor\" href=\"#3-输出逻辑\">#</a> <strong>3. 输出逻辑：</strong></h4>\n<ul>\n<li><code>puts(&quot;what a shame...&quot;)</code>  提示可能与程序的输入或逻辑错误有关，提示用户输入的值不符合预期。</li>\n</ul>\n<hr />\n<h3 id=\"建议的进一步步骤\"><a class=\"anchor\" href=\"#建议的进一步步骤\">#</a> <strong>建议的进一步步骤：</strong></h3>\n<ol>\n<li><strong>观察输入数据结构</strong>：分析传入的  <code>a1</code>  数组内容，特别是其在  <code>main</code>  函数中是如何被填充的。</li>\n<li><strong>跟踪执行</strong>：使用调试工具逐步跟踪  <code>vm_operad</code>  的执行，观察  <code>Str</code>  和  <code>v4</code>  的变化。</li>\n<li><strong>构造测试用例</strong>：通过手动构造适当的  <code>a1</code>  数组来观察函数的行为，以找到可能的输出或  <code>flag</code> 。</li>\n</ol>\n<hr />\n<p>希望这个分析对你进一步理解  <code>vm_operad</code>  的逻辑有帮助！如果你还有其他问题或者需要更深入的讨论，请告诉我！</p>\n",
            "tags": [
                "CTF",
                "二进制安全",
                "逆向工程reverse",
                "二进制",
                "CTF",
                "逆向",
                "网鼎杯"
            ]
        },
        {
            "id": "https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/",
            "url": "https://0d0-1yp0.github.io/2024/11/28/CTF/binary/%E5%A0%86%E6%A0%88%E4%B8%8D%E5%B9%B3%E8%A1%A1,%E5%B8%83%E6%A0%88/",
            "title": "堆栈不平衡，布栈",
            "date_published": "2024-11-27T16:00:00.000Z",
            "content_html": "<h1 id=\"堆栈不平衡\"><a class=\"anchor\" href=\"#堆栈不平衡\">#</a> 堆栈不平衡</h1>\n<p>通常是由于函数调用和返回过程中堆栈操作的不匹配。每当调用一个函数时，程序会将当前的栈指针（SP）和返回地址压入堆栈，这会影响到后续的堆栈操作。</p>\n<p>例如，假设一个函数调用  <code>func</code> ，在进入  <code>func</code>  时，栈指针会增加（即压入返回地址）。如果在  <code>func</code>  中未正确地平衡堆栈（比如未能弹出相应的值），那么在返回时，栈指针可能会指向一个不正确的位置，导致堆栈不平衡。</p>\n<p>至于栈指针的修改，可以通过调整指令来确保调用的函数有正确的返回地址。例如，修改  <code>call</code>  指令的目标地址为  <code>0</code> ，可以防止调用某个函数，这在某些逆向工程中是用于跳过不必要的函数调用或陷阱，达到对程序行为的控制。</p>\n<p>简单来说，理解堆栈的操作顺序和调用约定是非常重要的。通过反汇编工具分析这些操作，可以更好地理解程序的执行流程和潜在的漏洞。你可以从调试程序，观察栈的变化入手，加深对这些概念的理解。</p>\n<p>要深入理解堆栈不平衡的问题，我们可以从堆栈的工作原理和汇编代码角度进行分析。</p>\n<h3 id=\"1-堆栈的基本概念\"><a class=\"anchor\" href=\"#1-堆栈的基本概念\">#</a> 1. 堆栈的基本概念</h3>\n<p>堆栈是一种后进先出（LIFO）的数据结构，用于存储函数调用的信息，包括返回地址、局部变量和参数。堆栈的顶端通常由栈指针（SP）指向。</p>\n<h3 id=\"2-函数调用的过程\"><a class=\"anchor\" href=\"#2-函数调用的过程\">#</a> 2. 函数调用的过程</h3>\n<p>当一个函数被调用时，会执行以下步骤：</p>\n<ol>\n<li><strong>保存返回地址</strong>：调用指令（如  <code>call func</code> ）会将当前指令的下一条地址压入堆栈。</li>\n<li><strong>调整栈指针</strong>：栈指针会减少（在 x86 架构中，栈向下增长）。</li>\n<li><strong>进入函数体</strong>：函数内部可以通过栈来存储局部变量。</li>\n</ol>\n<h4 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> 示例代码</h4>\n<pre><code class=\"language-assembly\">push ebp           ; 保存旧的基指针\nmov ebp, esp      ; 设置新的基指针\nsub esp, 16       ; 为局部变量分配空间\n\n; 函数体\n\nmov esp, ebp      ; 恢复栈指针\npop ebp           ; 恢复旧的基指针\nret                ; 返回\n</code></pre>\n<h3 id=\"3-堆栈不平衡的原因\"><a class=\"anchor\" href=\"#3-堆栈不平衡的原因\">#</a> 3. 堆栈不平衡的原因</h3>\n<p>如果在函数中未正确弹出压入的值，或者在返回之前没有恢复堆栈状态，就会导致堆栈不平衡。比如，如果你在函数内部多次压入值而没有相应的弹出，堆栈将继续增长，最终导致溢出。</p>\n<h3 id=\"4-栈指针的修改\"><a class=\"anchor\" href=\"#4-栈指针的修改\">#</a> 4. 栈指针的修改</h3>\n<p>栈指针的修改通常涉及  <code>push</code>  和  <code>pop</code>  指令。例如，如果需要跳过某个函数的执行，可以将  <code>call</code>  指令的目标地址更改为  <code>0</code> ，这样不会实际调用任何函数，从而避免栈指针的进一步修改。</p>\n<h4 id=\"伪代码示例\"><a class=\"anchor\" href=\"#伪代码示例\">#</a> 伪代码示例</h4>\n<pre><code class=\"language-assembly\">call 0x0         ; 不会改变堆栈状态\n</code></pre>\n<h3 id=\"5-可视化结构图\"><a class=\"anchor\" href=\"#5-可视化结构图\">#</a> 5. 可视化结构图</h3>\n<pre><code>[ ESP ]   --&gt;  | Return Address | &lt;-- call func\n               | Local Var 1    |\n               | Local Var 2    |\n               | ...            |\n               | Old EBP        |\n[ EBP ]   --&gt;  | Base Pointer   |\n</code></pre>\n<h3 id=\"6-逆向工程的实用技巧\"><a class=\"anchor\" href=\"#6-逆向工程的实用技巧\">#</a> 6. 逆向工程的实用技巧</h3>\n<ul>\n<li><strong>使用调试工具</strong>：例如 GDB 或 x64dbg，逐步执行代码，观察堆栈的变化。</li>\n<li><strong>分析调用约定</strong>：了解不同平台（如 x86 和 x64）的调用约定，这对逆向非常重要。</li>\n<li><strong>编写脚本</strong>：可以使用 Python 等语言结合工具（如 IDA Pro 或 Ghidra）自动化分析任务。</li>\n</ul>\n<p>掌握这些基础知识后，继续深入学习汇编语言和计算机体系结构将有助于你成为真正的逆向工程大师！</p>\n<h1 id=\"布栈\"><a class=\"anchor\" href=\"#布栈\">#</a> 布栈</h1>\n<blockquote>\n<p>教我做一道 CTF 中的 pwn 题: #!/usr/bin/env python from pwn import *  sh = process ('./ret2libc1')  binsh_addr = 0x8048720 system_plt = 0x08048460 payload = flat ([b'a' * 112, system_plt, b'b' * 4, binsh_addr]) sh.sendline (payload)  sh.interactive () 这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以 'bbbb' 作为虚假的地址，其后参数对应的参数内容。  你看他布栈的时候，为什么要 system_plt 后面要布一个虚假的地址，然后才是参数呢，这里没太懂</p>\n</blockquote>\n<p>这道题目是典型的 <strong>ret2libc</strong> 攻击 (Return-to-libc)，目标是通过覆盖栈上的返回地址，绕过程序的正常流程，转而调用  <code>system()</code>  函数来执行命令（在这个例子中是  <code>/bin/sh</code> ）。为了理解为什么  <code>system_plt</code>  后面需要填充一个虚假的地址（ <code>b'b' * 4</code> ），我们需要详细分析下栈结构和函数调用的过程。</p>\n<h3 id=\"背景知识\"><a class=\"anchor\" href=\"#背景知识\">#</a> 背景知识</h3>\n<p>在  <code>x86</code>  架构的程序中，函数调用的基本过程如下：</p>\n<ol>\n<li><strong>压栈</strong>：当一个函数被调用时，程序会将当前的 <strong>返回地址</strong> 压入栈中，这个返回地址是程序调用该函数后，程序应该跳转回来的地址。</li>\n<li><strong>参数传递</strong>：在栈上，函数的参数会紧随返回地址之后依次被压入栈中。</li>\n<li><strong>栈帧结构</strong>：每次函数调用时，都会为该函数分配一个栈帧，栈帧中包含：\n<ul>\n<li><strong>返回地址</strong>：指向调用函数之后的代码位置。</li>\n<li><strong>参数</strong>：该函数的参数。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"攻击思路\"><a class=\"anchor\" href=\"#攻击思路\">#</a> 攻击思路</h3>\n<p>在这道题中，我们要利用程序中的漏洞，覆盖栈上的返回地址，使得程序在执行  <code>ret</code> （返回指令）时跳到我们指定的地址，也就是  <code>system()</code>  函数的地址。</p>\n<h3 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sh <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ret2libc1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>binsh_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x8048720</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>system_plt <span class=\"token operator\">=</span> <span class=\"token number\">0x08048460</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">112</span><span class=\"token punctuation\">,</span> system_plt<span class=\"token punctuation\">,</span> <span class=\"token string\">b'b'</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> binsh_addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li>\n<p><strong> <code>binsh_addr = 0x8048720</code> </strong>：这是我们要传给  <code>system()</code>  函数的参数地址，也就是  <code>/bin/sh</code>  字符串的地址。 <code>system()</code>  函数需要一个字符串参数，在这里我们传递的是  <code>/bin/sh</code>  的地址， <code>system()</code>  会执行该命令，启动一个 shell。</p>\n</li>\n<li>\n<p><strong> <code>system_plt = 0x08048460</code> </strong>：这是  <code>system</code>  函数的地址，在程序中的 <strong>PLT（Procedure Linkage Table）</strong> 区域。PLT 是程序用来调用动态库函数的一个表，每当程序要调用动态库中的函数时，都会先跳转到 PLT 处，由 PLT 去调用函数的实际地址。</p>\n</li>\n<li>\n<p><strong> <code>payload = flat([b'a' * 112, system_plt, b'b' * 4, binsh_addr])</code> </strong>：</p>\n<ul>\n<li><strong> <code>b'a' * 112</code> </strong>：这里填充的是  <code>112</code>  个字节  <code>a</code> ，这是覆盖栈帧到返回地址的部分。程序会首先执行一些前期的操作（例如栈的初始化、局部变量等），然后遇到返回地址。因为栈的布局是从高地址到低地址的，所以我们填充  <code>a</code>  字符来覆盖返回地址的空间，确保在覆盖掉返回地址后，后面的内容是我们想要填充的内容。</li>\n<li><strong> <code>system_plt</code> </strong>：这是我们覆盖的返回地址。当栈上的返回地址被覆盖为  <code>system_plt</code>  后，程序将跳转到  <code>system()</code>  函数。这个  <code>system_plt</code>  的地址是硬编码的，它会让程序跳转到  <code>system()</code>  的实际地址。注意，这个地址是 PLT 表中的地址，在动态链接的程序中，PLT 是一个跳转表，用于跳转到  <code>system</code>  函数的实际实现地址。</li>\n<li><strong> <code>b'b' * 4</code> </strong>：这是一个 <strong>虚假的返回地址</strong>，也就是说这是我们填充在  <code>system_plt</code>  后的一个占位符。这个部分的大小是  <code>4</code>  字节（通常是  <code>x86</code>  架构的指针大小）。为什么要填充这个虚假的返回地址呢？因为  <code>system()</code>  函数的调用约定是需要一个参数（即  <code>/bin/sh</code>  的地址）。这个虚假的返回地址用于模拟栈上  <code>system()</code>  函数执行完之后返回的地址。我们这样做是为了让栈结构保持正确，在调用  <code>system()</code>  时，栈帧结构要完整，所以我们需要一个假的返回地址来确保  <code>system()</code>  执行完成后能正确返回。实际上，在这道题中，虚假的地址  <code>b'b' * 4</code>  会被  <code>system()</code>  执行后丢弃。</li>\n<li><strong> <code>binsh_addr</code> </strong>：这是我们传递给  <code>system()</code>  函数的参数  <code>/bin/sh</code>  字符串的地址。 <code>system()</code>  函数需要一个字符串作为参数，这个参数是  <code>system()</code>  在执行时使用的命令，告诉它启动一个 shell。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>sh.sendline(payload)</code> </strong>：这一行是将构造好的 payload 发送到程序中，触发栈的溢出和返回地址的修改。</p>\n</li>\n<li>\n<p><strong> <code>sh.interactive()</code> </strong>：执行完 payload 后，程序将进入交互模式，让我们与程序进行交互，通常在这种 CTF 题目中，这意味着我们已经成功地获得了一个 shell，可以执行命令。</p>\n</li>\n</ol>\n<h3 id=\"为什么要填充虚假的地址\"><a class=\"anchor\" href=\"#为什么要填充虚假的地址\">#</a> 为什么要填充虚假的地址？</h3>\n<p>在调用  <code>system()</code>  函数时，通常在栈上需要有一个返回地址，指示函数执行完之后应该跳转到哪里。由于  <code>system()</code>  是一个库函数，它执行完成后并不会返回到一个特定的地址，而是会根据调用栈返回到调用它的地方。但是，由于我们要用  <code>ret2libc</code>  攻击来绕过正常的程序流程，我们通过修改返回地址，使得程序跳转到  <code>system()</code>  函数。但是  <code>system()</code>  函数的调用约定仍然需要栈上有一个正确的返回地址（即调用  <code>system()</code>  后程序会跳回的地址）。</p>\n<ul>\n<li>由于  <code>system()</code>  在执行后会返回，我们需要一个虚假的返回地址来填补栈上的空隙，确保栈帧结构完整。</li>\n<li>我们用  <code>b'b' * 4</code>  来填充这个虚假的返回地址。这里的  <code>4</code>  字节是因为在 x86 架构中，返回地址是一个指针，占用 4 字节。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li><strong> <code>system_plt</code> </strong> 是我们想跳转到的地址，即  <code>system()</code>  函数的入口。</li>\n<li><strong>虚假的返回地址 ( <code>b'b' * 4</code> )</strong> 用于保证栈帧的完整性，它只是一个占位符。 <code>system()</code>  执行后会跳过这个虚假的地址，并且返回到  <code>system()</code>  函数的调用者。</li>\n<li><strong> <code>binsh_addr</code> </strong> 是传递给  <code>system()</code>  函数的参数，即  <code>/bin/sh</code>  的地址， <code>system()</code>  会执行它，启动一个 shell。</li>\n</ul>\n<p>这个过程通过巧妙地控制栈上的返回地址，利用系统中已经存在的库函数来执行恶意代码，从而达到绕过程序控制并获取 shell 的目的。</p>\n",
            "tags": [
                "CTF",
                "二进制安全",
                "基础",
                "二进制",
                "CTF"
            ]
        }
    ]
}